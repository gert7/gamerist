var search_data = {"index":{"searchIndex":["actioncontroller","testcase","actiondispatch","integrationtest","session","redisstore","actionmailer","base","collector","deliverymethods","classmethods","mail","logsubscriber","mailhelper","noninferrablemailererror","railtie","activesupport","testcase","behavior","classmethods","testhelper","activemodel","attributemethods","classmethods","callbacks","conversion","dirty","errors","forbiddenattributeserror","lint","tests","missingattributeerror","model","name","naming","securepassword","classmethods","instancemethodsonactivation","serialization","serializers","json","xml","strictvalidationfailed","translation","validations","callbacks","classmethods","classmethods","helpermethods","validator","activerecord","activesupport","cache","redisstore","testcase","encoding","object","rails","api","apptask","repotask","task","appbuilder","apprailsloader","application","bootstrap","activesupport","logger","configuration","finisher","actiondispatch","activesupport","routesreloader","backtracecleaner","configuration","middlewarestackproxy","console","consolemethods","dbconsole","deprecatedconstant","engine","activesupport","configuration","railties","rake","generators","actions","activemodel","base","migration","classmethods","namedbase","testcase","testing","assertions","behaviour","classmethods","setupandteardown","info","activerecord","gem","infocontroller","actiondispatch","debugexceptions","initializable","classmethods","collection","initializer","paths","path","root","pluginbuilder","rack","debugger","logtailer","logger","railtie","configurable","classmethods","configuration","server","options","testtask","testinfo","testunitrailtie","version","rbconfig","sourceannotationextractor","annotation","!~()","+()","-()","<<()","<=>()","==()","===()","=~()","[]()","[]()","[]=()","[]=()","abstract_railtie?()","add()","add()","add_delivery_method()","add_on_blank()","add_on_empty()","add_shebang_option!()","add_source()","added?()","after()","after_initialize()","after_validation()","all()","all()","all_paths()","allow_concurrency?()","any()","api_dir()","api_dir()","api_main()","app()","app()","app()","app()","app()","app_generators()","app_middleware()","application()","application_name()","arguments()","as_json()","as_json()","assert_class_method()","assert_directory()","assert_emails()","assert_field_default_value()","assert_field_type()","assert_file()","assert_instance_method()","assert_method()","assert_migration()","assert_no_directory()","assert_no_emails()","assert_no_file()","assert_no_migration()","attachments()","attachments()","attribute_method?()","attribute_missing()","attributes_names()","authenticate()","autoload_once()","autoload_once_paths()","autoload_paths()","autoload_paths()","available_environments()","backtrace_cleaner()","banner()","base_name()","base_root()","before()","before_configuration()","before_eager_load()","before_initialize()","before_validation()","belongs_to?()","bin()","bin()","bind()","blank?()","block_format()","build()","call()","call()","call()","call()","call()","call_app()","capify!()","changed()","changed?()","changed_attributes()","changes()","check_class_collision()","children()","class_name()","class_path()","clear()","clear()","clear_validators!()","colorize_logging()","colorize_logging=()","component_root_dir()","component_root_dir()","compute_tags()","concat()","config()","config()","config()","config()","config()","configru()","configuration()","configure()","configure_rdoc_files()","console()","controller()","count()","create_fixtures()","create_generated_attribute()","custom()","database_configuration()","database_yml()","db()","debugger?()","decrement()","default()","default_aliases_for_option()","default_for_option()","default_generator_root()","default_i18n_subject()","default_options()","default_source_root()","default_value_for_option()","define_model_callbacks()","delete()","delete()","delete_entry()","delete_matched()","deliver()","deprecate()","desc()","desc()","destination()","destroy()","determine_default_mailer()","directories()","display()","each()","each()","each()","eager_load()","eager_load!()","eager_load_namespaces()","eager_load_paths()","empty?()","encoding=()","endpoint()","engines()","enumerate()","env()","env=()","env_config()","env_config()","environment()","environment()","environment()","environment?()","eql?()","errors()","errors()","exec_app_rails()","exist?()","existent()","existent_directories()","expanded()","expire()","extify()","extract_annotations_from()","fallbacks()","file_path()","filter_by()","find()","find()","find()","find_cmd_and_exec()","find_executable()","find_in()","first()","format_paragraph()","framework_version()","frameworks()","from_json()","from_xml()","full_message()","full_messages()","full_messages_for()","gem()","gem_group()","gemfile()","gemfile()","gemfile_entry()","gemspec()","generate()","generate_message()","generate_railtie_name()","generate_test_dummy()","generator()","generator_name()","generators()","get()","git()","gitignore()","gitignore()","groups()","has_key?()","has_secure_password()","headers()","help()","helper()","helpers()","helpers_paths()","hidden_namespaces()","hide!()","hide_namespaces()","hook_for()","human()","human_attribute_name()","human_name()","i18n_scope()","i18n_scope()","include?()","increment()","indent()","index_helper()","inherited()","inherited()","inherited()","inherited()","initialize!()","initialize_test_deliveries()","initialized?()","initialized?()","initializer()","initializer()","initializers()","initializers()","initializers_chain()","initializers_for()","insert()","insert_after()","insert_before()","inside_template()","inside_template?()","instance()","invalid?()","invoke()","isolate_namespace()","javascripts()","key_generator()","key_matcher()","keys()","keys()","kind()","kind()","last()","lib()","lib()","lib()","license()","load_and_configure_sdoc()","load_and_configure_sdoc()","load_console()","load_generators()","load_paths()","load_rack_cache()","load_runner()","load_seed()","load_tasks()","log()","log()","log_level()","log_path()","logger()","lookup_ancestors()","mail()","mailer()","mailer_class()","mailer_name()","message()","method_missing()","method_missing()","method_missing()","middleware()","middleware()","migration_template()","model_name()","module_namespacing()","namespace()","namespace()","namespaced?()","namespaced_class_path()","namespaced_file_path()","namespaced_path()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_session()","no_color!()","opt_parser()","param_key()","parse!()","parse_arguments()","parse_arguments()","password=()","password_confirmation=()","paths()","paths()","persisted?()","plural()","plural_file_name()","plural_name()","plural_table_name()","pluralize_table_names?()","previous_changes()","property()","public_directory()","public_path()","push()","rails_version()","rails_version()","railtie_name()","railtie_namespace()","railties()","rake()","rake_tasks()","rakefile()","rakefile()","rakefile()","read_entry()","read_multi()","readme()","readme()","readme()","receive()","receive()","reconnect()","register_interceptor()","register_interceptors()","register_observer()","register_observers()","regular_class_path()","reload!()","reload!()","reload_routes!()","remove_hook_for()","require_debugger()","respond_to?()","respond_to?()","respond_to?()","respond_to_without_attributes?()","root()","root=()","route()","route_key()","route_url()","routes()","run()","run_generator()","run_initializers()","runner()","sandbox?()","save()","serializable_hash()","session_store()","set()","set_content_type()","set_environment()","set_environment!()","set_expected_mail()","setup_horo_variables()","show_exceptions_app()","singular()","singular_route_key()","singular_table_name()","size()","source_root()","start()","start()","start()","start()","started_request_message()","stats()","stylesheets()","subclasses()","subclasses()","swap()","table_name()","tail!()","template()","test()","test()","test_dummy_assets()","test_dummy_clean()","test_dummy_config()","test_errors_aref()","test_model_naming()","test_persisted?()","test_to_key()","test_to_param()","test_to_partial_path()","tests()","tests()","threadsafe!()","tmp()","to_a()","to_a()","to_ary()","to_hash()","to_html()","to_key()","to_model()","to_param()","to_partial_path()","to_prepare()","to_prepare_blocks()","to_s()","to_s()","to_s()","to_str()","to_xml()","to_xml()","tsort_each_child()","uncountable?()","uncountable?()","unshift()","update()","usage_path()","use()","valid?()","validate()","validate()","validates()","validates!()","validates_absence_of()","validates_acceptance_of()","validates_confirmation_of()","validates_each()","validates_exclusion_of()","validates_format_of()","validates_inclusion_of()","validates_length_of()","validates_numericality_of()","validates_presence_of()","validates_size_of()","validates_with()","validates_with()","validators()","validators_on()","values()","values()","values_at()","vendor()","vendor()","vendor_javascripts()","vendor_stylesheets()","version()","version()","version()","watchable_dirs()","watchable_files()","whiny_nils=()","wrap_with_namespace()","write()","write_entry()","changelog","readme","changelog","readme","changelog","rdoc_main","readme"],"longSearchIndex":["actioncontroller","actioncontroller::testcase","actiondispatch","actiondispatch::integrationtest","actiondispatch::session","actiondispatch::session::redisstore","actionmailer","actionmailer::base","actionmailer::collector","actionmailer::deliverymethods","actionmailer::deliverymethods::classmethods","actionmailer::deliverymethods::mail","actionmailer::logsubscriber","actionmailer::mailhelper","actionmailer::noninferrablemailererror","actionmailer::railtie","actionmailer::railtie::activesupport","actionmailer::testcase","actionmailer::testcase::behavior","actionmailer::testcase::behavior::classmethods","actionmailer::testhelper","activemodel","activemodel::attributemethods","activemodel::attributemethods::classmethods","activemodel::callbacks","activemodel::conversion","activemodel::dirty","activemodel::errors","activemodel::forbiddenattributeserror","activemodel::lint","activemodel::lint::tests","activemodel::missingattributeerror","activemodel::model","activemodel::name","activemodel::naming","activemodel::securepassword","activemodel::securepassword::classmethods","activemodel::securepassword::instancemethodsonactivation","activemodel::serialization","activemodel::serializers","activemodel::serializers::json","activemodel::serializers::xml","activemodel::strictvalidationfailed","activemodel::translation","activemodel::validations","activemodel::validations::callbacks","activemodel::validations::callbacks::classmethods","activemodel::validations::classmethods","activemodel::validations::helpermethods","activemodel::validator","activerecord","activesupport","activesupport::cache","activesupport::cache::redisstore","activesupport::testcase","encoding","object","rails","rails::api","rails::api::apptask","rails::api::repotask","rails::api::task","rails::appbuilder","rails::apprailsloader","rails::application","rails::application::bootstrap","rails::application::bootstrap::activesupport","rails::application::bootstrap::activesupport::logger","rails::application::configuration","rails::application::finisher","rails::application::finisher::actiondispatch","rails::application::finisher::activesupport","rails::application::routesreloader","rails::backtracecleaner","rails::configuration","rails::configuration::middlewarestackproxy","rails::console","rails::consolemethods","rails::dbconsole","rails::deprecatedconstant","rails::engine","rails::engine::activesupport","rails::engine::configuration","rails::engine::railties","rails::engine::rake","rails::generators","rails::generators::actions","rails::generators::activemodel","rails::generators::base","rails::generators::migration","rails::generators::migration::classmethods","rails::generators::namedbase","rails::generators::testcase","rails::generators::testing","rails::generators::testing::assertions","rails::generators::testing::behaviour","rails::generators::testing::behaviour::classmethods","rails::generators::testing::setupandteardown","rails::info","rails::info::activerecord","rails::info::gem","rails::infocontroller","rails::infocontroller::actiondispatch","rails::infocontroller::actiondispatch::debugexceptions","rails::initializable","rails::initializable::classmethods","rails::initializable::collection","rails::initializable::initializer","rails::paths","rails::paths::path","rails::paths::root","rails::pluginbuilder","rails::rack","rails::rack::debugger","rails::rack::logtailer","rails::rack::logger","rails::railtie","rails::railtie::configurable","rails::railtie::configurable::classmethods","rails::railtie::configuration","rails::server","rails::server::options","rails::testtask","rails::testtask::testinfo","rails::testunitrailtie","rails::version","rbconfig","sourceannotationextractor","sourceannotationextractor::annotation","activemodel::name#!~()","rails::initializable::collection#+()","rails::engine::railties#-()","rails::paths::path#<<()","activemodel::name#<=>()","activemodel::name#==()","activemodel::name#===()","activemodel::name#=~()","activemodel::errors#[]()","rails::paths::root#[]()","activemodel::errors#[]=()","rails::paths::root#[]=()","rails::railtie#abstract_railtie?()","activemodel::errors#add()","rails::paths::root#add()","actionmailer::deliverymethods::classmethods#add_delivery_method()","activemodel::errors#add_on_blank()","activemodel::errors#add_on_empty()","rails::generators::base::add_shebang_option!()","rails::generators::actions#add_source()","activemodel::errors#added?()","rails::initializable::initializer#after()","rails::railtie::configuration#after_initialize()","activemodel::validations::callbacks::classmethods#after_validation()","actionmailer::collector#all()","rails::generators::activemodel::all()","rails::paths::root#all_paths()","rails::application#allow_concurrency?()","actionmailer::collector#any()","rails::api::apptask#api_dir()","rails::api::repotask#api_dir()","rails::api::task#api_main()","rails::appbuilder#app()","rails::consolemethods#app()","rails::engine#app()","rails::pluginbuilder#app()","rails::server#app()","rails::railtie::configuration#app_generators()","rails::railtie::configuration#app_middleware()","rails::generators::actions#application()","rails::generators::namedbase#application_name()","rails::generators::testing::behaviour::classmethods#arguments()","activemodel::errors#as_json()","activemodel::serializers::json#as_json()","rails::generators::testing::assertions#assert_class_method()","rails::generators::testing::assertions#assert_directory()","actionmailer::testhelper#assert_emails()","rails::generators::testing::assertions#assert_field_default_value()","rails::generators::testing::assertions#assert_field_type()","rails::generators::testing::assertions#assert_file()","rails::generators::testing::assertions#assert_instance_method()","rails::generators::testing::assertions#assert_method()","rails::generators::testing::assertions#assert_migration()","rails::generators::testing::assertions#assert_no_directory()","actionmailer::testhelper#assert_no_emails()","rails::generators::testing::assertions#assert_no_file()","rails::generators::testing::assertions#assert_no_migration()","actionmailer::base#attachments()","actionmailer::mailhelper#attachments()","activemodel::validations::classmethods#attribute_method?()","activemodel::attributemethods#attribute_missing()","rails::generators::namedbase#attributes_names()","activemodel::securepassword::instancemethodsonactivation#authenticate()","rails::paths::root#autoload_once()","rails::engine::configuration#autoload_once_paths()","rails::engine::configuration#autoload_paths()","rails::paths::root#autoload_paths()","rails::dbconsole#available_environments()","rails#backtrace_cleaner()","rails::generators::base::banner()","rails::generators::base::base_name()","rails::generators::base::base_root()","rails::initializable::initializer#before()","rails::railtie::configuration#before_configuration()","rails::railtie::configuration#before_eager_load()","rails::railtie::configuration#before_initialize()","activemodel::validations::callbacks::classmethods#before_validation()","rails::initializable::initializer#belongs_to?()","rails::appbuilder#bin()","rails::pluginbuilder#bin()","rails::initializable::initializer#bind()","activemodel::errors#blank?()","actionmailer::mailhelper#block_format()","rails::generators::activemodel::build()","rails::application#call()","rails::engine#call()","rails::rack::debugger#call()","rails::rack::logtailer#call()","rails::rack::logger#call()","rails::rack::logger#call_app()","rails::generators::actions#capify!()","activemodel::dirty#changed()","activemodel::dirty#changed?()","activemodel::dirty#changed_attributes()","activemodel::dirty#changes()","rails::generators::namedbase::check_class_collision()","rails::paths::path#children()","rails::generators::namedbase#class_name()","rails::generators::namedbase#class_path()","activemodel::errors#clear()","activesupport::cache::redisstore#clear()","activemodel::validations::classmethods#clear_validators!()","rails::application::configuration#colorize_logging()","rails::application::configuration#colorize_logging=()","rails::api::apptask#component_root_dir()","rails::api::repotask#component_root_dir()","rails::rack::logger#compute_tags()","rails::paths::path#concat()","rails::appbuilder#config()","rails::dbconsole#config()","rails::engine#config()","rails::pluginbuilder#config()","rails::railtie#config()","rails::appbuilder#configru()","rails#configuration()","rails::railtie::configurable::classmethods#configure()","rails::api::task#configure_rdoc_files()","rails::railtie#console()","rails::consolemethods#controller()","activemodel::errors#count()","object#create_fixtures()","rails::generators::testing::behaviour#create_generated_attribute()","actionmailer::collector#custom()","rails::application::configuration#database_configuration()","rails::appbuilder#database_yml()","rails::appbuilder#db()","rails::console#debugger?()","activesupport::cache::redisstore#decrement()","actionmailer::base#default()","rails::generators::base::default_aliases_for_option()","rails::generators::base::default_for_option()","rails::generators::base::default_generator_root()","actionmailer::base#default_i18n_subject()","rails::server#default_options()","rails::generators::base::default_source_root()","rails::generators::base::default_value_for_option()","activemodel::callbacks#define_model_callbacks()","activemodel::errors#delete()","rails::configuration::middlewarestackproxy#delete()","activesupport::cache::redisstore#delete_entry()","activesupport::cache::redisstore#delete_matched()","actionmailer::logsubscriber#deliver()","rails::deprecatedconstant::deprecate()","rails::api::task#desc()","rails::generators::base::desc()","rails::generators::testing::behaviour::classmethods#destination()","rails::generators::activemodel#destroy()","actionmailer::testcase::behavior::classmethods#determine_default_mailer()","sourceannotationextractor::annotation::directories()","sourceannotationextractor#display()","activemodel::errors#each()","rails::engine::railties#each()","rails::paths::path#each()","rails::paths::root#eager_load()","rails::engine#eager_load!()","rails::railtie::configuration#eager_load_namespaces()","rails::engine::configuration#eager_load_paths()","activemodel::errors#empty?()","rails::application::configuration#encoding=()","rails::engine#endpoint()","rails::engine::railties::engines()","sourceannotationextractor::enumerate()","rails#env()","rails#env=()","rails::application#env_config()","rails::engine#env_config()","rails::console#environment()","rails::dbconsole#environment()","rails::generators::actions#environment()","rails::console#environment?()","activemodel::name#eql?()","activemodel::validations#errors()","rails::generators::activemodel#errors()","rails::apprailsloader::exec_app_rails()","activesupport::cache::redisstore#exist?()","rails::paths::path#existent()","rails::paths::path#existent_directories()","rails::paths::path#expanded()","activesupport::cache::redisstore#expire()","rails::generators::actions#extify()","sourceannotationextractor#extract_annotations_from()","rails::generators::fallbacks()","rails::generators::namedbase#file_path()","rails::paths::root#filter_by()","rails::engine#find()","rails::generators::activemodel::find()","sourceannotationextractor#find()","rails::dbconsole#find_cmd_and_exec()","rails::apprailsloader::find_executable()","sourceannotationextractor#find_in()","rails::paths::path#first()","actionmailer::mailhelper#format_paragraph()","rails::info#framework_version()","rails::info#frameworks()","activemodel::serializers::json#from_json()","activemodel::serializers::xml#from_xml()","activemodel::errors#full_message()","activemodel::errors#full_messages()","activemodel::errors#full_messages_for()","rails::generators::actions#gem()","rails::generators::actions#gem_group()","rails::appbuilder#gemfile()","rails::pluginbuilder#gemfile()","rails::pluginbuilder#gemfile_entry()","rails::pluginbuilder#gemspec()","rails::generators::actions#generate()","activemodel::errors#generate_message()","rails::railtie#generate_railtie_name()","rails::pluginbuilder#generate_test_dummy()","rails::generators::testing::behaviour#generator()","rails::generators::base::generator_name()","rails::railtie#generators()","activemodel::errors#get()","rails::generators::actions#git()","rails::appbuilder#gitignore()","rails::pluginbuilder#gitignore()","rails#groups()","activemodel::errors#has_key?()","activemodel::securepassword::classmethods#has_secure_password()","actionmailer::base#headers()","rails::generators::help()","rails::consolemethods#helper()","rails::engine#helpers()","rails::engine#helpers_paths()","rails::generators::hidden_namespaces()","rails::generators::base::hide!()","rails::generators#hide_namespaces()","rails::generators::base::hook_for()","activemodel::name#human()","activemodel::translation#human_attribute_name()","rails::generators::namedbase#human_name()","activemodel::translation#i18n_scope()","rails::generators::namedbase#i18n_scope()","activemodel::errors#include?()","activesupport::cache::redisstore#increment()","rails::generators::namedbase#indent()","rails::generators::namedbase#index_helper()","rails::application#inherited()","rails::engine#inherited()","rails::railtie#inherited()","rails::railtie::configurable::classmethods#inherited()","rails#initialize!()","actionmailer::testcase::behavior#initialize_test_deliveries()","rails#initialized?()","rails::application#initialized?()","rails::generators::actions#initializer()","rails::initializable::classmethods#initializer()","rails::initializable#initializers()","rails::initializable::classmethods#initializers()","rails::initializable::classmethods#initializers_chain()","rails::initializable::classmethods#initializers_for()","rails::configuration::middlewarestackproxy#insert()","rails::configuration::middlewarestackproxy#insert_after()","rails::configuration::middlewarestackproxy#insert_before()","rails::generators::namedbase#inside_template()","rails::generators::namedbase#inside_template?()","rails::railtie::configurable::classmethods#instance()","activemodel::validations#invalid?()","rails::generators::invoke()","rails::engine#isolate_namespace()","rails::pluginbuilder#javascripts()","rails::application#key_generator()","activesupport::cache::redisstore#key_matcher()","activemodel::errors#keys()","rails::paths::root#keys()","activemodel::validator::kind()","activemodel::validator#kind()","rails::paths::path#last()","rails::appbuilder#lib()","rails::generators::actions#lib()","rails::pluginbuilder#lib()","rails::pluginbuilder#license()","rails::api::repotask#load_and_configure_sdoc()","rails::api::task#load_and_configure_sdoc()","rails::engine#load_console()","rails::engine#load_generators()","rails::paths::root#load_paths()","rails::application#load_rack_cache()","rails::engine#load_runner()","rails::engine#load_seed()","rails::engine#load_tasks()","rails::appbuilder#log()","rails::generators::actions#log()","rails::application::configuration#log_level()","rails::server#log_path()","actionmailer::logsubscriber#logger()","activemodel::translation#lookup_ancestors()","actionmailer::base#mail()","actionmailer::mailhelper#mailer()","actionmailer::testcase::behavior::classmethods#mailer_class()","actionmailer::base#mailer_name()","actionmailer::mailhelper#message()","actionmailer::base#method_missing()","activemodel::attributemethods#method_missing()","rails::railtie::configurable::classmethods#method_missing()","rails::engine::configuration#middleware()","rails::server#middleware()","rails::generators::migration#migration_template()","activemodel::naming#model_name()","rails::generators::namedbase#module_namespacing()","rails::generators::base::namespace()","rails::generators::namedbase#namespace()","rails::generators::namedbase#namespaced?()","rails::generators::namedbase#namespaced_class_path()","rails::generators::namedbase#namespaced_file_path()","rails::generators::namedbase#namespaced_path()","actiondispatch::session::redisstore::new()","actionmailer::base::new()","actionmailer::collector::new()","actionmailer::noninferrablemailererror::new()","activemodel::errors::new()","activemodel::model::new()","activemodel::name::new()","activemodel::validator::new()","activesupport::cache::redisstore::new()","rails::api::task::new()","rails::application::new()","rails::application::configuration::new()","rails::application::routesreloader::new()","rails::backtracecleaner::new()","rails::configuration::middlewarestackproxy::new()","rails::console::new()","rails::dbconsole::new()","rails::engine::new()","rails::engine::configuration::new()","rails::engine::railties::new()","rails::generators::activemodel::new()","rails::initializable::initializer::new()","rails::paths::path::new()","rails::paths::root::new()","rails::rack::debugger::new()","rails::rack::logtailer::new()","rails::rack::logger::new()","rails::railtie::configuration::new()","rails::server::new()","sourceannotationextractor::new()","rails::consolemethods#new_session()","rails::generators::no_color!()","rails::server#opt_parser()","activemodel::naming::param_key()","rails::server::options#parse!()","rails::console#parse_arguments()","rails::dbconsole#parse_arguments()","activemodel::securepassword::instancemethodsonactivation#password=()","activemodel::securepassword::instancemethodsonactivation#password_confirmation=()","rails::application::configuration#paths()","rails::engine::configuration#paths()","activemodel::model#persisted?()","activemodel::naming::plural()","rails::generators::namedbase#plural_file_name()","rails::generators::namedbase#plural_name()","rails::generators::namedbase#plural_table_name()","rails::generators::namedbase#pluralize_table_names?()","activemodel::dirty#previous_changes()","rails::info#property()","rails::appbuilder#public_directory()","rails#public_path()","rails::paths::path#push()","rails::api::apptask#rails_version()","rails::api::repotask#rails_version()","rails::railtie#railtie_name()","rails::railtie#railtie_namespace()","rails::engine#railties()","rails::generators::actions#rake()","rails::railtie#rake_tasks()","rails::appbuilder#rakefile()","rails::generators::actions#rakefile()","rails::pluginbuilder#rakefile()","activesupport::cache::redisstore#read_entry()","activesupport::cache::redisstore#read_multi()","rails::appbuilder#readme()","rails::generators::actions#readme()","rails::pluginbuilder#readme()","actionmailer::base#receive()","actionmailer::logsubscriber#receive()","activesupport::cache::redisstore#reconnect()","actionmailer::base#register_interceptor()","actionmailer::base#register_interceptors()","actionmailer::base#register_observer()","actionmailer::base#register_observers()","rails::generators::namedbase#regular_class_path()","rails::application::routesreloader#reload!()","rails::consolemethods#reload!()","rails::application#reload_routes!()","rails::generators::base::remove_hook_for()","rails::console#require_debugger()","activemodel::attributemethods#respond_to?()","rails::railtie::configurable::classmethods#respond_to?()","rails::railtie::configuration#respond_to?()","activemodel::attributemethods#respond_to_without_attributes?()","rails#root()","rails::engine::configuration#root=()","rails::generators::actions#route()","activemodel::naming::route_key()","rails::generators::namedbase#route_url()","rails::engine#routes()","rails::initializable::initializer#run()","rails::generators::testing::behaviour#run_generator()","rails::initializable#run_initializers()","rails::railtie#runner()","rails::console#sandbox?()","rails::generators::activemodel#save()","activemodel::serialization#serializable_hash()","rails::application::configuration#session_store()","activemodel::errors#set()","actionmailer::base#set_content_type()","rails::server#set_environment()","rails::console#set_environment!()","actionmailer::testcase::behavior#set_expected_mail()","rails::api::task#setup_horo_variables()","rails::application#show_exceptions_app()","activemodel::naming::singular()","activemodel::naming::singular_route_key()","rails::generators::namedbase#singular_table_name()","activemodel::errors#size()","rails::generators::base::source_root()","rails::console#start()","rails::dbconsole::start()","rails::dbconsole#start()","rails::server#start()","rails::rack::logger#started_request_message()","activesupport::cache::redisstore#stats()","rails::pluginbuilder#stylesheets()","rails::generators::subclasses()","rails::railtie#subclasses()","rails::configuration::middlewarestackproxy#swap()","rails::generators::namedbase#table_name()","rails::rack::logtailer#tail!()","rails::generators::namedbase#template()","rails::appbuilder#test()","rails::pluginbuilder#test()","rails::pluginbuilder#test_dummy_assets()","rails::pluginbuilder#test_dummy_clean()","rails::pluginbuilder#test_dummy_config()","activemodel::lint::tests#test_errors_aref()","activemodel::lint::tests#test_model_naming()","activemodel::lint::tests#test_persisted?()","activemodel::lint::tests#test_to_key()","activemodel::lint::tests#test_to_param()","activemodel::lint::tests#test_to_partial_path()","actionmailer::testcase::behavior::classmethods#tests()","rails::generators::testing::behaviour::classmethods#tests()","rails::application::configuration#threadsafe!()","rails::appbuilder#tmp()","activemodel::errors#to_a()","rails::paths::path#to_a()","rails::paths::path#to_ary()","activemodel::errors#to_hash()","rails::info#to_html()","activemodel::conversion#to_key()","activemodel::conversion#to_model()","activemodel::conversion#to_param()","activemodel::conversion#to_partial_path()","rails::railtie::configuration#to_prepare()","rails::railtie::configuration#to_prepare_blocks()","activemodel::name#to_s()","rails::info#to_s()","sourceannotationextractor::annotation#to_s()","activemodel::name#to_str()","activemodel::errors#to_xml()","activemodel::serializers::xml#to_xml()","rails::initializable::collection#tsort_each_child()","activemodel::naming::uncountable?()","rails::generators::namedbase#uncountable?()","rails::paths::path#unshift()","rails::generators::activemodel#update()","rails::generators::base::usage_path()","rails::configuration::middlewarestackproxy#use()","activemodel::validations#valid?()","activemodel::validations::classmethods#validate()","activemodel::validator#validate()","activemodel::validations::classmethods#validates()","activemodel::validations::classmethods#validates!()","activemodel::validations::helpermethods#validates_absence_of()","activemodel::validations::helpermethods#validates_acceptance_of()","activemodel::validations::helpermethods#validates_confirmation_of()","activemodel::validations::classmethods#validates_each()","activemodel::validations::helpermethods#validates_exclusion_of()","activemodel::validations::helpermethods#validates_format_of()","activemodel::validations::helpermethods#validates_inclusion_of()","activemodel::validations::helpermethods#validates_length_of()","activemodel::validations::helpermethods#validates_numericality_of()","activemodel::validations::helpermethods#validates_presence_of()","activemodel::validations::helpermethods#validates_size_of()","activemodel::validations#validates_with()","activemodel::validations::classmethods#validates_with()","activemodel::validations::classmethods#validators()","activemodel::validations::classmethods#validators_on()","activemodel::errors#values()","rails::paths::root#values()","rails::paths::root#values_at()","rails::appbuilder#vendor()","rails::generators::actions#vendor()","rails::appbuilder#vendor_javascripts()","rails::appbuilder#vendor_stylesheets()","actionmailer::version()","activemodel::version()","rails#version()","rails::railtie::configuration#watchable_dirs()","rails::railtie::configuration#watchable_files()","rails::application::configuration#whiny_nils=()","rails::generators::namedbase#wrap_with_namespace()","activesupport::cache::redisstore#write()","activesupport::cache::redisstore#write_entry()","","","","","","",""],"info":[["ActionController","","classes/ActionController.html","",""],["ActionController::TestCase","","classes/ActionController/TestCase.html","",""],["ActionDispatch","","classes/ActionDispatch.html","",""],["ActionDispatch::IntegrationTest","","classes/ActionDispatch/IntegrationTest.html","",""],["ActionDispatch::Session","","classes/ActionDispatch/Session.html","",""],["ActionDispatch::Session::RedisStore","","classes/ActionDispatch/Session/RedisStore.html","",""],["ActionMailer","","classes/ActionMailer.html","",""],["ActionMailer::Base","","classes/ActionMailer/Base.html","","<p>Action Mailer allows you to send email from your application using a mailer\nmodel and views.\n<p>Mailer Models …\n"],["ActionMailer::Collector","","classes/ActionMailer/Collector.html","",""],["ActionMailer::DeliveryMethods","","classes/ActionMailer/DeliveryMethods.html","","<p>This module handles everything related to mail delivery, from registering\nnew delivery methods to configuring …\n"],["ActionMailer::DeliveryMethods::ClassMethods","","classes/ActionMailer/DeliveryMethods/ClassMethods.html","",""],["ActionMailer::DeliveryMethods::Mail","","classes/ActionMailer/DeliveryMethods/Mail.html","",""],["ActionMailer::LogSubscriber","","classes/ActionMailer/LogSubscriber.html","",""],["ActionMailer::MailHelper","","classes/ActionMailer/MailHelper.html","",""],["ActionMailer::NonInferrableMailerError","","classes/ActionMailer/NonInferrableMailerError.html","",""],["ActionMailer::Railtie","","classes/ActionMailer/Railtie.html","",""],["ActionMailer::Railtie::ActiveSupport","","classes/ActionMailer/Railtie/ActiveSupport.html","",""],["ActionMailer::TestCase","","classes/ActionMailer/TestCase.html","",""],["ActionMailer::TestCase::Behavior","","classes/ActionMailer/TestCase/Behavior.html","",""],["ActionMailer::TestCase::Behavior::ClassMethods","","classes/ActionMailer/TestCase/Behavior/ClassMethods.html","",""],["ActionMailer::TestHelper","","classes/ActionMailer/TestHelper.html","",""],["ActiveModel","","classes/ActiveModel.html","",""],["ActiveModel::AttributeMethods","","classes/ActiveModel/AttributeMethods.html","","<p>Active Model Attribute Methods\n<p><code>ActiveModel::AttributeMethods</code> provides a way to add prefixes\nand suffixes ...\n"],["ActiveModel::AttributeMethods::ClassMethods","","classes/ActiveModel/AttributeMethods/ClassMethods.html","",""],["ActiveModel::Callbacks","","classes/ActiveModel/Callbacks.html","","<p>Active Model Callbacks\n<p>Provides an interface for any class to have Active Record like callbacks.\n<p>Like the …\n"],["ActiveModel::Conversion","","classes/ActiveModel/Conversion.html","","<p>Active Model Conversion\n<p>Handles default conversions: to_model, to_key, to_param, and\nto_partial_path. …\n"],["ActiveModel::Dirty","","classes/ActiveModel/Dirty.html","","<p>Active Model Dirty\n<p>Provides a way to track changes in your object in the same way as Active\nRecord does. …\n"],["ActiveModel::Errors","","classes/ActiveModel/Errors.html","","<p>Active Model Errors\n<p>Provides a modified <code>Hash</code> that you can include in your object\nfor handling error messages …\n"],["ActiveModel::ForbiddenAttributesError","","classes/ActiveModel/ForbiddenAttributesError.html","","<p>Raised when forbidden attributes are used for mass assignment.\n\n<pre><code>class Person &lt; ActiveRecord::Base\nend\n ...\n</code></pre>\n"],["ActiveModel::Lint","","classes/ActiveModel/Lint.html","",""],["ActiveModel::Lint::Tests","","classes/ActiveModel/Lint/Tests.html","","<p>Active Model Lint Tests\n<p>You can test whether an object is compliant with the Active Model API by\nincluding …\n"],["ActiveModel::MissingAttributeError","","classes/ActiveModel/MissingAttributeError.html","","<p>Raised when an attribute is not defined.\n\n<pre><code>class User &lt; ActiveRecord::Base\n  has_many :pets\nend\n\nuser = ...\n</code></pre>\n"],["ActiveModel::Model","","classes/ActiveModel/Model.html","","<p>Active Model Basic Model\n<p>Includes the required interface for an object to interact with\n<code>ActionPack</code>, using …\n"],["ActiveModel::Name","","classes/ActiveModel/Name.html","",""],["ActiveModel::Naming","","classes/ActiveModel/Naming.html","","<p>Active Model Naming\n<p>Creates a <code>model_name</code> method on your object.\n<p>To implement, just extend ActiveModel::Naming …\n"],["ActiveModel::SecurePassword","","classes/ActiveModel/SecurePassword.html","",""],["ActiveModel::SecurePassword::ClassMethods","","classes/ActiveModel/SecurePassword/ClassMethods.html","",""],["ActiveModel::SecurePassword::InstanceMethodsOnActivation","","classes/ActiveModel/SecurePassword/InstanceMethodsOnActivation.html","",""],["ActiveModel::Serialization","","classes/ActiveModel/Serialization.html","","<p>Active Model Serialization\n<p>Provides a basic serialization to a serializable_hash for your object.\n<p>A minimal …\n"],["ActiveModel::Serializers","","classes/ActiveModel/Serializers.html","",""],["ActiveModel::Serializers::JSON","","classes/ActiveModel/Serializers/JSON.html","","<p>Active Model JSON Serializer\n"],["ActiveModel::Serializers::Xml","","classes/ActiveModel/Serializers/Xml.html","","<p>Active Model XML Serializer\n"],["ActiveModel::StrictValidationFailed","","classes/ActiveModel/StrictValidationFailed.html","",""],["ActiveModel::Translation","","classes/ActiveModel/Translation.html","","<p>Active Model Translation\n<p>Provides integration between your object and the Rails internationalization\n(i18n) …\n"],["ActiveModel::Validations","","classes/ActiveModel/Validations.html","","<p>Active Model Validations\n<p>Provides a full validation framework to your objects.\n<p>A minimal implementation …\n"],["ActiveModel::Validations::Callbacks","","classes/ActiveModel/Validations/Callbacks.html","","<p>Active Model Validation Callbacks\n<p>Provides an interface for any class to have <code>before_validation</code>\nand <code>after_validation</code> …\n"],["ActiveModel::Validations::Callbacks::ClassMethods","","classes/ActiveModel/Validations/Callbacks/ClassMethods.html","",""],["ActiveModel::Validations::ClassMethods","","classes/ActiveModel/Validations/ClassMethods.html","",""],["ActiveModel::Validations::HelperMethods","","classes/ActiveModel/Validations/HelperMethods.html","",""],["ActiveModel::Validator","","classes/ActiveModel/Validator.html","","<p>Active Model Validator\n<p>A simple base class that can be used along with\nActiveModel::Validations::ClassMethods.validates_with …\n"],["ActiveRecord","","classes/ActiveRecord.html","",""],["ActiveSupport","","classes/ActiveSupport.html","",""],["ActiveSupport::Cache","","classes/ActiveSupport/Cache.html","",""],["ActiveSupport::Cache::RedisStore","","classes/ActiveSupport/Cache/RedisStore.html","",""],["ActiveSupport::TestCase","","classes/ActiveSupport/TestCase.html","",""],["Encoding","","classes/Encoding.html","",""],["Object","","classes/Object.html","",""],["Rails","","classes/Rails.html","",""],["Rails::API","","classes/Rails/API.html","",""],["Rails::API::AppTask","","classes/Rails/API/AppTask.html","",""],["Rails::API::RepoTask","","classes/Rails/API/RepoTask.html","",""],["Rails::API::Task","","classes/Rails/API/Task.html","",""],["Rails::AppBuilder","","classes/Rails/AppBuilder.html","","<p>The application builder allows you to override elements of the application\ngenerator without being forced …\n"],["Rails::AppRailsLoader","","classes/Rails/AppRailsLoader.html","",""],["Rails::Application","","classes/Rails/Application.html","","<p>In Rails 3.0, a Rails::Application object was introduced which is nothing\nmore than an Engine but with …\n"],["Rails::Application::Bootstrap","","classes/Rails/Application/Bootstrap.html","",""],["Rails::Application::Bootstrap::ActiveSupport","","classes/Rails/Application/Bootstrap/ActiveSupport.html","",""],["Rails::Application::Bootstrap::ActiveSupport::Logger","","classes/Rails/Application/Bootstrap/ActiveSupport/Logger.html","",""],["Rails::Application::Configuration","","classes/Rails/Application/Configuration.html","",""],["Rails::Application::Finisher","","classes/Rails/Application/Finisher.html","",""],["Rails::Application::Finisher::ActionDispatch","","classes/Rails/Application/Finisher/ActionDispatch.html","",""],["Rails::Application::Finisher::ActiveSupport","","classes/Rails/Application/Finisher/ActiveSupport.html","",""],["Rails::Application::RoutesReloader","","classes/Rails/Application/RoutesReloader.html","",""],["Rails::BacktraceCleaner","","classes/Rails/BacktraceCleaner.html","",""],["Rails::Configuration","","classes/Rails/Configuration.html","",""],["Rails::Configuration::MiddlewareStackProxy","","classes/Rails/Configuration/MiddlewareStackProxy.html","","<p>MiddlewareStackProxy is a proxy for the Rails middleware stack that allows\nyou to configure middlewares …\n"],["Rails::Console","","classes/Rails/Console.html","",""],["Rails::ConsoleMethods","","classes/Rails/ConsoleMethods.html","",""],["Rails::DBConsole","","classes/Rails/DBConsole.html","",""],["Rails::DeprecatedConstant","","classes/Rails/DeprecatedConstant.html","",""],["Rails::Engine","","classes/Rails/Engine.html","","<p><code>Rails::Engine</code> allows you to wrap a specific Rails application\nor subset of functionality and share it ...\n"],["Rails::Engine::ActiveSupport","","classes/Rails/Engine/ActiveSupport.html","",""],["Rails::Engine::Configuration","","classes/Rails/Engine/Configuration.html","",""],["Rails::Engine::Railties","","classes/Rails/Engine/Railties.html","",""],["Rails::Engine::Rake","","classes/Rails/Engine/Rake.html","",""],["Rails::Generators","","classes/Rails/Generators.html","",""],["Rails::Generators::Actions","","classes/Rails/Generators/Actions.html","",""],["Rails::Generators::ActiveModel","","classes/Rails/Generators/ActiveModel.html","","<p>ActiveModel is a class to be implemented by each ORM to allow Rails to\ngenerate customized controller …\n"],["Rails::Generators::Base","","classes/Rails/Generators/Base.html","",""],["Rails::Generators::Migration","","classes/Rails/Generators/Migration.html","","<p>Holds common methods for migrations. It assumes that migrations has the\n[0-9]*_name format and can be …\n"],["Rails::Generators::Migration::ClassMethods","","classes/Rails/Generators/Migration/ClassMethods.html","",""],["Rails::Generators::NamedBase","","classes/Rails/Generators/NamedBase.html","",""],["Rails::Generators::TestCase","","classes/Rails/Generators/TestCase.html","","<p>This class provides a TestCase for testing generators. To setup, you need\njust to configure the destination …\n"],["Rails::Generators::Testing","","classes/Rails/Generators/Testing.html","",""],["Rails::Generators::Testing::Assertions","","classes/Rails/Generators/Testing/Assertions.html","",""],["Rails::Generators::Testing::Behaviour","","classes/Rails/Generators/Testing/Behaviour.html","",""],["Rails::Generators::Testing::Behaviour::ClassMethods","","classes/Rails/Generators/Testing/Behaviour/ClassMethods.html","",""],["Rails::Generators::Testing::SetupAndTeardown","","classes/Rails/Generators/Testing/SetupAndTeardown.html","",""],["Rails::Info","","classes/Rails/Info.html","",""],["Rails::Info::ActiveRecord","","classes/Rails/Info/ActiveRecord.html","",""],["Rails::Info::Gem","","classes/Rails/Info/Gem.html","",""],["Rails::InfoController","","classes/Rails/InfoController.html","",""],["Rails::InfoController::ActionDispatch","","classes/Rails/InfoController/ActionDispatch.html","",""],["Rails::InfoController::ActionDispatch::DebugExceptions","","classes/Rails/InfoController/ActionDispatch/DebugExceptions.html","",""],["Rails::Initializable","","classes/Rails/Initializable.html","",""],["Rails::Initializable::ClassMethods","","classes/Rails/Initializable/ClassMethods.html","",""],["Rails::Initializable::Collection","","classes/Rails/Initializable/Collection.html","",""],["Rails::Initializable::Initializer","","classes/Rails/Initializable/Initializer.html","",""],["Rails::Paths","","classes/Rails/Paths.html","",""],["Rails::Paths::Path","","classes/Rails/Paths/Path.html","",""],["Rails::Paths::Root","","classes/Rails/Paths/Root.html","","<p>This object is an extended hash that behaves as root of the\n<code>Rails::Paths</code> system. It allows you to collect …\n"],["Rails::PluginBuilder","","classes/Rails/PluginBuilder.html","","<p>The plugin builder allows you to override elements of the plugin generator\nwithout being forced to reverse …\n"],["Rails::Rack","","classes/Rails/Rack.html","",""],["Rails::Rack::Debugger","","classes/Rails/Rack/Debugger.html","",""],["Rails::Rack::LogTailer","","classes/Rails/Rack/LogTailer.html","",""],["Rails::Rack::Logger","","classes/Rails/Rack/Logger.html","","<p>Sets log tags, logs the request, calls the app, and flushes the logs.\n"],["Rails::Railtie","","classes/Rails/Railtie.html","","<p>Railtie is the core of the Rails framework and provides several hooks to\nextend Rails and/or modify the …\n"],["Rails::Railtie::Configurable","","classes/Rails/Railtie/Configurable.html","",""],["Rails::Railtie::Configurable::ClassMethods","","classes/Rails/Railtie/Configurable/ClassMethods.html","",""],["Rails::Railtie::Configuration","","classes/Rails/Railtie/Configuration.html","",""],["Rails::Server","","classes/Rails/Server.html","",""],["Rails::Server::Options","","classes/Rails/Server/Options.html","",""],["Rails::TestTask","","classes/Rails/TestTask.html","",""],["Rails::TestTask::TestInfo","","classes/Rails/TestTask/TestInfo.html","",""],["Rails::TestUnitRailtie","","classes/Rails/TestUnitRailtie.html","",""],["Rails::VERSION","","classes/Rails/VERSION.html","",""],["RbConfig","","classes/RbConfig.html","",""],["SourceAnnotationExtractor","","classes/SourceAnnotationExtractor.html","","<p>Implements the logic behind the rake tasks for annotations like\n\n<pre><code>rake notes\nrake notes:optimize</code></pre>\n<p>and friends. …\n"],["SourceAnnotationExtractor::Annotation","","classes/SourceAnnotationExtractor/Annotation.html","",""],["!~","ActiveModel::Name","classes/ActiveModel/Name.html#method-i-21-7E","","<p>Equivalent to <code>String#!~</code>. Match the class name against the\ngiven regexp. Returns <code>true</code> if there is no match, …\n"],["+","Rails::Initializable::Collection","classes/Rails/Initializable/Collection.html#method-i-2B","(other)",""],["-","Rails::Engine::Railties","classes/Rails/Engine/Railties.html#method-i-2D","(others)",""],["<<","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-3C-3C","(path)",""],["<=>","ActiveModel::Name","classes/ActiveModel/Name.html#method-i-3C-3D-3E","","<p>Equivalent to <code>String#&lt;=&gt;</code>.\n\n<pre><code>class BlogPost\n  extend ActiveModel::Naming\nend\n\nBlogPost.model_name &lt;=&gt; ...\n</code></pre>\n"],["==","ActiveModel::Name","classes/ActiveModel/Name.html#method-i-3D-3D","","<p>Equivalent to <code>String#==</code>. Returns <code>true</code> if the\nclass name and <code>other</code> are equal, otherwise <code>false</code>.\n\n<pre><code>class BlogPost ...\n</code></pre>\n"],["===","ActiveModel::Name","classes/ActiveModel/Name.html#method-i-3D-3D-3D","","<p>Equivalent to <code>#==</code>.\n\n<pre><code>class BlogPost\n  extend ActiveModel::Naming\nend\n\nBlogPost.model_name === 'BlogPost' ...\n</code></pre>\n"],["=~","ActiveModel::Name","classes/ActiveModel/Name.html#method-i-3D-7E","","<p>Equivalent to <code>String#=~</code>. Match the class name against the\ngiven regexp. Returns the position where the …\n"],["[]","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-5B-5D","(attribute)","<p>When passed a symbol or a name of a method, returns an array of errors for\nthe method.\n\n<pre><code>person.errors[:name] ...</code></pre>\n"],["[]","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-5B-5D","(path)",""],["[]=","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-5B-5D-3D","(attribute, error)","<p>Adds to the supplied attribute the supplied error message.\n\n<pre><code>person.errors[:name] = &quot;must be set&quot;\nperson.errors[:name] ...</code></pre>\n"],["[]=","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-5B-5D-3D","(path, value)",""],["abstract_railtie?","Rails::Railtie","classes/Rails/Railtie.html#method-i-abstract_railtie-3F","()",""],["add","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-add","(attribute, message = nil, options = {})","<p>Adds <code>message</code> to the error messages on <code>attribute</code>.\nMore than one error can be added to the same <code>attribute</code> …\n"],["add","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-add","(path, options = {})",""],["add_delivery_method","ActionMailer::DeliveryMethods::ClassMethods","classes/ActionMailer/DeliveryMethods/ClassMethods.html#method-i-add_delivery_method","(symbol, klass, default_options={})","<p>Adds a new delivery method through the given class using the given symbol\nas alias and the default options …\n"],["add_on_blank","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-add_on_blank","(attributes, options = {})","<p>Will add an error message to each of the attributes in\n<code>attributes</code> that is blank (using Object#blank? …\n"],["add_on_empty","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-add_on_empty","(attributes, options = {})","<p>Will add an error message to each of the attributes in\n<code>attributes</code> that is empty.\n\n<pre><code>person.errors.add_on_empty(:name) ...</code></pre>\n"],["add_shebang_option!","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-add_shebang_option-21","()","<p>Small macro to add ruby as an option to the generator with proper default\nvalue plus an instance helper …\n"],["add_source","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-add_source","(source, options={})","<p>Add the given source to Gemfile\n\n<pre><code>add_source &quot;http://gems.github.com/&quot;</code></pre>\n"],["added?","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-added-3F","(attribute, message = nil, options = {})","<p>Returns <code>true</code> if an error on the attribute with the given\nmessage is present, <code>false</code> otherwise. <code>message</code> …\n"],["after","Rails::Initializable::Initializer","classes/Rails/Initializable/Initializer.html#method-i-after","()",""],["after_initialize","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-after_initialize","(&block)","<p>Last configurable block to run. Called after frameworks initialize.\n"],["after_validation","ActiveModel::Validations::Callbacks::ClassMethods","classes/ActiveModel/Validations/Callbacks/ClassMethods.html#method-i-after_validation","(*args, &block)","<p>Defines a callback that will get called right after validation happens.\n\n<pre><code>class Person\n  include ActiveModel::Validations ...\n</code></pre>\n"],["all","ActionMailer::Collector","classes/ActionMailer/Collector.html#method-i-all","(*args, &block)",""],["all","Rails::Generators::ActiveModel","classes/Rails/Generators/ActiveModel.html#method-c-all","(klass)","<p>GET index\n"],["all_paths","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-all_paths","()",""],["allow_concurrency?","Rails::Application","classes/Rails/Application.html#method-i-allow_concurrency-3F","()",""],["any","ActionMailer::Collector","classes/ActionMailer/Collector.html#method-i-any","(*args, &block)",""],["api_dir","Rails::API::AppTask","classes/Rails/API/AppTask.html#method-i-api_dir","()",""],["api_dir","Rails::API::RepoTask","classes/Rails/API/RepoTask.html#method-i-api_dir","()",""],["api_main","Rails::API::Task","classes/Rails/API/Task.html#method-i-api_main","()",""],["app","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-app","()",""],["app","Rails::ConsoleMethods","classes/Rails/ConsoleMethods.html#method-i-app","(create=false)","<p>reference the global “app” instance, created on demand. To recreate the\ninstance, pass a non-false …\n"],["app","Rails::Engine","classes/Rails/Engine.html#method-i-app","()","<p>Returns the underlying rack application for this engine.\n"],["app","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-app","()",""],["app","Rails::Server","classes/Rails/Server.html#method-i-app","()","<p>TODO: this is no longer required but we keep it for the moment to support\nolder config.ru files.\n"],["app_generators","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-app_generators","()","<p>This allows you to modify application’s generators from Railties.\n<p>Values set on app_generators will become …\n"],["app_middleware","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-app_middleware","()","<p>This allows you to modify the application’s middlewares from Engines.\n<p>All operations you run on the app_middleware …\n"],["application","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-application","(data=nil, options={}, &block)",""],["application_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-application_name","()","<p>Tries to retrieve the application name or simple return application.\n"],["arguments","Rails::Generators::Testing::Behaviour::ClassMethods","classes/Rails/Generators/Testing/Behaviour/ClassMethods.html#method-i-arguments","(array)","<p>Sets default arguments on generator invocation. This can be overwritten\nwhen invoking it.\n\n<pre><code>arguments %w(app_name ...</code></pre>\n"],["as_json","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-as_json","(options=nil)","<p>Returns a Hash that can be used as the JSON representation for this object.\nYou can pass the <code>:full_messages</code> …\n"],["as_json","ActiveModel::Serializers::JSON","classes/ActiveModel/Serializers/JSON.html#method-i-as_json","(options = nil)","<p>Returns a hash representing the model. Some configuration can be passed\nthrough <code>options</code>.\n<p>The option <code>include_root_in_json</code> …\n"],["assert_class_method","Rails::Generators::Testing::Assertions","classes/Rails/Generators/Testing/Assertions.html#method-i-assert_class_method","(method, content, &block)","<p>Asserts the given class method exists in the given content. This method\ndoes not detect class methods …\n"],["assert_directory","Rails::Generators::Testing::Assertions","classes/Rails/Generators/Testing/Assertions.html#method-i-assert_directory","(relative, *contents)",""],["assert_emails","ActionMailer::TestHelper","classes/ActionMailer/TestHelper.html#method-i-assert_emails","(number)","<p>Asserts that the number of emails sent matches the given number.\n\n<pre><code>def test_emails\n  assert_emails 0\n  ContactMailer.welcome.deliver ...\n</code></pre>\n"],["assert_field_default_value","Rails::Generators::Testing::Assertions","classes/Rails/Generators/Testing/Assertions.html#method-i-assert_field_default_value","(attribute_type, value)","<p>Asserts the given attribute type gets a proper default value:\n\n<pre><code>assert_field_default_value :string, &quot;MyString&quot;</code></pre>\n"],["assert_field_type","Rails::Generators::Testing::Assertions","classes/Rails/Generators/Testing/Assertions.html#method-i-assert_field_type","(attribute_type, field_type)","<p>Asserts the given attribute type gets translated to a field type properly:\n\n<pre><code>assert_field_type :date, :date_select</code></pre>\n"],["assert_file","Rails::Generators::Testing::Assertions","classes/Rails/Generators/Testing/Assertions.html#method-i-assert_file","(relative, *contents)","<p>Asserts a given file exists. You need to supply an absolute path or a path\nrelative to the configured …\n"],["assert_instance_method","Rails::Generators::Testing::Assertions","classes/Rails/Generators/Testing/Assertions.html#method-i-assert_instance_method","(method, content)","<p>Asserts the given method exists in the given content. When a block is\ngiven, it yields the content of …\n"],["assert_method","Rails::Generators::Testing::Assertions","classes/Rails/Generators/Testing/Assertions.html#method-i-assert_method","(method, content)",""],["assert_migration","Rails::Generators::Testing::Assertions","classes/Rails/Generators/Testing/Assertions.html#method-i-assert_migration","(relative, *contents, &block)","<p>Asserts a given migration exists. You need to supply an absolute path or a\npath relative to the configured …\n"],["assert_no_directory","Rails::Generators::Testing::Assertions","classes/Rails/Generators/Testing/Assertions.html#method-i-assert_no_directory","(relative)",""],["assert_no_emails","ActionMailer::TestHelper","classes/ActionMailer/TestHelper.html#method-i-assert_no_emails","(&block)","<p>Assert that no emails have been sent.\n\n<pre><code>def test_emails\n  assert_no_emails\n  ContactMailer.welcome.deliver ...\n</code></pre>\n"],["assert_no_file","Rails::Generators::Testing::Assertions","classes/Rails/Generators/Testing/Assertions.html#method-i-assert_no_file","(relative)","<p>Asserts a given file does not exist. You need to supply an absolute path or\na path relative to the configured …\n"],["assert_no_migration","Rails::Generators::Testing::Assertions","classes/Rails/Generators/Testing/Assertions.html#method-i-assert_no_migration","(relative)","<p>Asserts a given migration does not exist. You need to supply an absolute\npath or a path relative to the …\n"],["attachments","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-attachments","()","<p>Allows you to add attachments to an email, like so:\n\n<pre><code>mail.attachments['filename.jpg'] = File.read('/path/to/filename.jpg')</code></pre>\n"],["attachments","ActionMailer::MailHelper","classes/ActionMailer/MailHelper.html#method-i-attachments","()","<p>Access the message attachments list.\n"],["attribute_method?","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-attribute_method-3F","(attribute)","<p>Returns <code>true</code> if <code>attribute</code> is an attribute method,\n<code>false</code> otherwise.\n\n<pre><code>class Person\n  include ActiveModel::Validations ...\n</code></pre>\n"],["attribute_missing","ActiveModel::AttributeMethods","classes/ActiveModel/AttributeMethods.html#method-i-attribute_missing","(match, *args, &block)","<p><code>attribute_missing</code> is like <code>method_missing</code>, but for\nattributes. When <code>method_missing</code> is called we check ...\n"],["attributes_names","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-attributes_names","()",""],["authenticate","ActiveModel::SecurePassword::InstanceMethodsOnActivation","classes/ActiveModel/SecurePassword/InstanceMethodsOnActivation.html#method-i-authenticate","(unencrypted_password)","<p>Returns <code>self</code> if the password is correct, otherwise\n<code>false</code>.\n\n<pre><code>class User &lt; ActiveRecord::Base\n  has_secure_password ...\n</code></pre>\n"],["autoload_once","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-autoload_once","()",""],["autoload_once_paths","Rails::Engine::Configuration","classes/Rails/Engine/Configuration.html#method-i-autoload_once_paths","()",""],["autoload_paths","Rails::Engine::Configuration","classes/Rails/Engine/Configuration.html#method-i-autoload_paths","()",""],["autoload_paths","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-autoload_paths","()",""],["available_environments","Rails::DBConsole","classes/Rails/DBConsole.html#method-i-available_environments","()",""],["backtrace_cleaner","Rails","classes/Rails.html#method-i-backtrace_cleaner","()",""],["banner","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-banner","()","<p>Use Rails default banner.\n"],["base_name","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-base_name","()","<p>Sets the base_name taking into account the current class namespace.\n"],["base_root","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-base_root","()","<p>Returns the base root for a common set of generators. This is used to\ndynamically guess the default source …\n"],["before","Rails::Initializable::Initializer","classes/Rails/Initializable/Initializer.html#method-i-before","()",""],["before_configuration","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-before_configuration","(&block)","<p>First configurable block to run. Called before any initializers are run.\n"],["before_eager_load","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-before_eager_load","(&block)","<p>Third configurable block to run. Does not run if\n<code>config.cache_classes</code> set to false.\n"],["before_initialize","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-before_initialize","(&block)","<p>Second configurable block to run. Called before frameworks initialize.\n"],["before_validation","ActiveModel::Validations::Callbacks::ClassMethods","classes/ActiveModel/Validations/Callbacks/ClassMethods.html#method-i-before_validation","(*args, &block)","<p>Defines a callback that will get called right before validation happens.\n\n<pre><code>class Person\n  include ActiveModel::Validations ...\n</code></pre>\n"],["belongs_to?","Rails::Initializable::Initializer","classes/Rails/Initializable/Initializer.html#method-i-belongs_to-3F","(group)",""],["bin","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-bin","()",""],["bin","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-bin","(force = false)",""],["bind","Rails::Initializable::Initializer","classes/Rails/Initializable/Initializer.html#method-i-bind","(context)",""],["blank?","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-blank-3F","()","<p>aliases empty?\n"],["block_format","ActionMailer::MailHelper","classes/ActionMailer/MailHelper.html#method-i-block_format","(text)","<p>Take the text and format it, indented two spaces for each line, and wrapped\nat 72 columns.\n"],["build","Rails::Generators::ActiveModel","classes/Rails/Generators/ActiveModel.html#method-c-build","(klass, params=nil)","<p>GET new POST create\n"],["call","Rails::Application","classes/Rails/Application.html#method-i-call","(env)","<p>Implements call according to the Rack API. It simply dispatches the request\nto the underlying middleware …\n"],["call","Rails::Engine","classes/Rails/Engine.html#method-i-call","(env)","<p>Define the Rack API for this engine.\n"],["call","Rails::Rack::Debugger","classes/Rails/Rack/Debugger.html#method-i-call","(env)",""],["call","Rails::Rack::LogTailer","classes/Rails/Rack/LogTailer.html#method-i-call","(env)",""],["call","Rails::Rack::Logger","classes/Rails/Rack/Logger.html#method-i-call","(env)",""],["call_app","Rails::Rack::Logger","classes/Rails/Rack/Logger.html#method-i-call_app","(request, env)",""],["capify!","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-capify-21","()","<p>Just run the capify command in root\n\n<pre><code>capify!</code></pre>\n"],["changed","ActiveModel::Dirty","classes/ActiveModel/Dirty.html#method-i-changed","()","<p>Returns an array with the name of the attributes with unsaved changes.\n\n<pre><code>person.changed # =&gt; []\nperson.name ...\n</code></pre>\n"],["changed?","ActiveModel::Dirty","classes/ActiveModel/Dirty.html#method-i-changed-3F","()","<p>Returns <code>true</code> if any attribute have unsaved changes,\n<code>false</code> otherwise.\n\n<pre><code>person.changed? # =&gt; false\nperson.name ...\n</code></pre>\n"],["changed_attributes","ActiveModel::Dirty","classes/ActiveModel/Dirty.html#method-i-changed_attributes","()","<p>Returns a hash of the attributes with unsaved changes indicating their\noriginal values like <code>attr =&gt;</code> …\n"],["changes","ActiveModel::Dirty","classes/ActiveModel/Dirty.html#method-i-changes","()","<p>Returns a hash of changed attributes indicating their original and new\nvalues like <code>attr =&gt; [original</code> …\n"],["check_class_collision","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-c-check_class_collision","(options={})","<p>Add a class collisions name to be checked on class initialization. You can\nsupply a hash with a :prefix …\n"],["children","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-children","()",""],["class_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-class_name","()",""],["class_path","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-class_path","()",""],["clear","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-clear","()","<p>Clear the error messages.\n\n<pre><code>person.errors.full_messages # =&gt; [&quot;name can not be nil&quot;]\nperson.errors.clear ...\n</code></pre>\n"],["clear","ActiveSupport::Cache::RedisStore","classes/ActiveSupport/Cache/RedisStore.html#method-i-clear","()","<p>Clear all the data from the store.\n"],["clear_validators!","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-clear_validators-21","()","<p>Clears all of the validators and validations.\n<p>Note that this will clear anything that is being used to …\n"],["colorize_logging","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-colorize_logging","()",""],["colorize_logging=","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-colorize_logging-3D","(val)",""],["component_root_dir","Rails::API::AppTask","classes/Rails/API/AppTask.html#method-i-component_root_dir","(gem_name)",""],["component_root_dir","Rails::API::RepoTask","classes/Rails/API/RepoTask.html#method-i-component_root_dir","(component)",""],["compute_tags","Rails::Rack::Logger","classes/Rails/Rack/Logger.html#method-i-compute_tags","(request)",""],["concat","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-concat","(paths)",""],["config","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-config","()",""],["config","Rails::DBConsole","classes/Rails/DBConsole.html#method-i-config","()",""],["config","Rails::Engine","classes/Rails/Engine.html#method-i-config","()","<p>Define the configuration object for the engine.\n"],["config","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-config","()",""],["config","Rails::Railtie","classes/Rails/Railtie.html#method-i-config","()",""],["configru","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-configru","()",""],["configuration","Rails","classes/Rails.html#method-i-configuration","()","<p>The Configuration instance used to configure the Rails environment\n"],["configure","Rails::Railtie::Configurable::ClassMethods","classes/Rails/Railtie/Configurable/ClassMethods.html#method-i-configure","(&block)",""],["configure_rdoc_files","Rails::API::Task","classes/Rails/API/Task.html#method-i-configure_rdoc_files","()",""],["console","Rails::Railtie","classes/Rails/Railtie.html#method-i-console","(&blk)",""],["controller","Rails::ConsoleMethods","classes/Rails/ConsoleMethods.html#method-i-controller","()",""],["count","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-count","()","<p>Returns the number of error messages.\n\n<pre><code>person.errors.add(:name, &quot;can't be blank&quot;)\nperson.errors.count # ...</code></pre>\n"],["create_fixtures","Object","classes/Object.html#method-i-create_fixtures","(*fixture_set_names, &block)",""],["create_generated_attribute","Rails::Generators::Testing::Behaviour","classes/Rails/Generators/Testing/Behaviour.html#method-i-create_generated_attribute","(attribute_type, name = 'test', index = nil)","<p>Create a Rails::Generators::GeneratedAttribute by supplying the attribute\ntype and, optionally, the attribute …\n"],["custom","ActionMailer::Collector","classes/ActionMailer/Collector.html#method-i-custom","(mime, options = {})",""],["database_configuration","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-database_configuration","()","<p>Loads and returns the configuration of the database.\n"],["database_yml","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-database_yml","()",""],["db","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-db","()",""],["debugger?","Rails::Console","classes/Rails/Console.html#method-i-debugger-3F","()",""],["decrement","ActiveSupport::Cache::RedisStore","classes/ActiveSupport/Cache/RedisStore.html#method-i-decrement","(key, amount = 1)","<p>Decrement a key in the store\n<p>If the key doesn’t exist it will be initialized on 0. If the key exist but\n…\n"],["default","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-default","(value = nil)",""],["default_aliases_for_option","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-default_aliases_for_option","(name, options)","<p>Return default aliases for the option name given doing a lookup in\nRails::Generators.aliases.\n"],["default_for_option","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-default_for_option","(config, name, options, default)","<p>Return default for the option name given doing a lookup in config.\n"],["default_generator_root","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-default_generator_root","()",""],["default_i18n_subject","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-default_i18n_subject","(interpolations = {})","<p>Translates the <code>subject</code> using Rails I18n class under\n<code>[mailer_scope, action_name]</code> scope. If it does not …\n"],["default_options","Rails::Server","classes/Rails/Server.html#method-i-default_options","()",""],["default_source_root","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-default_source_root","()","<p>Returns the default source root for a given generator. This is used\ninternally by rails to set its generators …\n"],["default_value_for_option","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-default_value_for_option","(name, options)","<p>Return the default value for the option name given doing a lookup in\nRails::Generators.options.\n"],["define_model_callbacks","ActiveModel::Callbacks","classes/ActiveModel/Callbacks.html#method-i-define_model_callbacks","(*callbacks)","<p>define_model_callbacks accepts the same options\n<code>define_callbacks</code> does, in case you want to overwrite …\n"],["delete","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-delete","(key)","<p>Delete messages for <code>key</code>. Returns the deleted messages.\n\n<pre><code>person.errors.get(:name)    # =&gt; [&quot;can not be nil&quot;] ...\n</code></pre>\n"],["delete","Rails::Configuration::MiddlewareStackProxy","classes/Rails/Configuration/MiddlewareStackProxy.html#method-i-delete","(*args, &block)",""],["delete_entry","ActiveSupport::Cache::RedisStore","classes/ActiveSupport/Cache/RedisStore.html#method-i-delete_entry","(key, options)","<p>Implement the ActiveSupport::Cache#delete_entry\n<p>It’s really needed and use\n"],["delete_matched","ActiveSupport::Cache::RedisStore","classes/ActiveSupport/Cache/RedisStore.html#method-i-delete_matched","(matcher, options = nil)","<p>Delete objects for matched keys.\n<p>Performance note: this operation can be dangerous for large production …\n"],["deliver","ActionMailer::LogSubscriber","classes/ActionMailer/LogSubscriber.html#method-i-deliver","(event)",""],["deprecate","Rails::DeprecatedConstant","classes/Rails/DeprecatedConstant.html#method-c-deprecate","(old, current)",""],["desc","Rails::API::Task","classes/Rails/API/Task.html#method-i-desc","(description)","<p>Hack, ignore the desc calls performed by the original initializer.\n"],["desc","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-desc","(description=nil)","<p>Tries to get the description from a USAGE file one folder above the source\nroot otherwise uses a default …\n"],["destination","Rails::Generators::Testing::Behaviour::ClassMethods","classes/Rails/Generators/Testing/Behaviour/ClassMethods.html#method-i-destination","(path)","<p>Sets the destination of generator files:\n\n<pre><code>destination File.expand_path(&quot;../tmp&quot;, File.dirname(__FILE__))</code></pre>\n"],["destroy","Rails::Generators::ActiveModel","classes/Rails/Generators/ActiveModel.html#method-i-destroy","()","<p>DELETE destroy\n"],["determine_default_mailer","ActionMailer::TestCase::Behavior::ClassMethods","classes/ActionMailer/TestCase/Behavior/ClassMethods.html#method-i-determine_default_mailer","(name)",""],["directories","SourceAnnotationExtractor::Annotation","classes/SourceAnnotationExtractor/Annotation.html#method-c-directories","()",""],["display","SourceAnnotationExtractor","classes/SourceAnnotationExtractor.html#method-i-display","(results, options={})","<p>Prints the mapping from filenames to annotations in <code>results</code>\nordered by filename. The <code>options</code> hash is …\n"],["each","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-each","()","<p>Iterates through each error key, value pair in the error messages hash.\nYields the attribute and the …\n"],["each","Rails::Engine::Railties","classes/Rails/Engine/Railties.html#method-i-each","(*args, &block)",""],["each","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-each","(&block)",""],["eager_load","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-eager_load","()",""],["eager_load!","Rails::Engine","classes/Rails/Engine.html#method-i-eager_load-21","()","<p>Eager load the application by loading all ruby files inside eager_load\npaths.\n"],["eager_load_namespaces","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-eager_load_namespaces","()","<p>All namespaces that are eager loaded\n"],["eager_load_paths","Rails::Engine::Configuration","classes/Rails/Engine/Configuration.html#method-i-eager_load_paths","()",""],["empty?","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-empty-3F","()","<p>Returns <code>true</code> if no errors are found, <code>false</code>\notherwise. If the error message is a string it can be empty. …\n"],["encoding=","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-encoding-3D","(value)",""],["endpoint","Rails::Engine","classes/Rails/Engine.html#method-i-endpoint","(endpoint = nil)",""],["engines","Rails::Engine::Railties","classes/Rails/Engine/Railties.html#method-c-engines","()",""],["enumerate","SourceAnnotationExtractor","classes/SourceAnnotationExtractor.html#method-c-enumerate","(tag, options={})","<p>Prints all annotations with tag <code>tag</code> under the root directories\n<code>app</code>, <code>config</code>, <code>db</code>, <code>lib</code>,\nand <code>test</code> (recursively). …\n"],["env","Rails","classes/Rails.html#method-i-env","()",""],["env=","Rails","classes/Rails.html#method-i-env-3D","(environment)",""],["env_config","Rails::Application","classes/Rails/Application.html#method-i-env_config","()","<p>Stores some of the Rails initial environment parameters which will be used\nby middlewares and engines …\n"],["env_config","Rails::Engine","classes/Rails/Engine.html#method-i-env_config","()","<p>Defines additional Rack env configuration that is added on each call.\n"],["environment","Rails::Console","classes/Rails/Console.html#method-i-environment","()",""],["environment","Rails::DBConsole","classes/Rails/DBConsole.html#method-i-environment","()",""],["environment","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-environment","(data=nil, options={}, &block)","<p>Adds a line inside the Application class for config/application.rb.\n<p>If options :env is specified, the …\n"],["environment?","Rails::Console","classes/Rails/Console.html#method-i-environment-3F","()",""],["eql?","ActiveModel::Name","classes/ActiveModel/Name.html#method-i-eql-3F","","<p>Equivalent to <code>String#eql?</code>. Returns <code>true</code> if the\nclass name and <code>other</code> have the same length and content, …\n"],["errors","ActiveModel::Validations","classes/ActiveModel/Validations.html#method-i-errors","()","<p>Returns the <code>Errors</code> object that holds all information about\nattribute error messages.\n\n<pre><code>class Person\n  include ...\n</code></pre>\n"],["errors","Rails::Generators::ActiveModel","classes/Rails/Generators/ActiveModel.html#method-i-errors","()","<p>POST create PATCH/PUT update\n"],["exec_app_rails","Rails::AppRailsLoader","classes/Rails/AppRailsLoader.html#method-c-exec_app_rails","()",""],["exist?","ActiveSupport::Cache::RedisStore","classes/ActiveSupport/Cache/RedisStore.html#method-i-exist-3F","(name, options = nil)","<p>fixed problem with invalid exists? method\ngithub.com/rails/rails/commit/cad2c8f5791d5bd4af0f240d96e00bae76eabd2f …\n"],["existent","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-existent","()","<p>Returns all expanded paths but only if they exist in the filesystem.\n"],["existent_directories","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-existent_directories","()",""],["expanded","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-expanded","()","<p>Expands all paths against the root and return all unique values.\n"],["expire","ActiveSupport::Cache::RedisStore","classes/ActiveSupport/Cache/RedisStore.html#method-i-expire","(key, ttl)",""],["extify","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-extify","(name)","<p>Add an extension to the given name based on the platform.\n"],["extract_annotations_from","SourceAnnotationExtractor","classes/SourceAnnotationExtractor.html#method-i-extract_annotations_from","(file, pattern)","<p>If <code>file</code> is the filename of a file that contains annotations\nthis method returns a hash with a single …\n"],["fallbacks","Rails::Generators","classes/Rails/Generators.html#method-c-fallbacks","()","<p>Hold configured generators fallbacks. If a plugin developer wants a\ngenerator group to fallback to another …\n"],["file_path","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-file_path","()",""],["filter_by","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-filter_by","(constraint)",""],["find","Rails::Engine","classes/Rails/Engine.html#method-i-find","(path)","<p>Finds engine with given path\n"],["find","Rails::Generators::ActiveModel","classes/Rails/Generators/ActiveModel.html#method-c-find","(klass, params=nil)","<p>GET show GET edit PATCH/PUT update DELETE destroy\n"],["find","SourceAnnotationExtractor","classes/SourceAnnotationExtractor.html#method-i-find","(dirs)","<p>Returns a hash that maps filenames under <code>dirs</code> (recursively) to\narrays with their annotations.\n"],["find_cmd_and_exec","Rails::DBConsole","classes/Rails/DBConsole.html#method-i-find_cmd_and_exec","(commands, *args)",""],["find_executable","Rails::AppRailsLoader","classes/Rails/AppRailsLoader.html#method-c-find_executable","()",""],["find_in","SourceAnnotationExtractor","classes/SourceAnnotationExtractor.html#method-i-find_in","(dir)","<p>Returns a hash that maps filenames under <code>dir</code> (recursively) to\narrays with their annotations. Only files …\n"],["first","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-first","()",""],["format_paragraph","ActionMailer::MailHelper","classes/ActionMailer/MailHelper.html#method-i-format_paragraph","(text, len = 72, indent = 2)","<p>Returns <code>text</code> wrapped at <code>len</code> columns and indented\n<code>indent</code> spaces.\n\n<pre><code>my_text = 'Here is a sample text with ...</code></pre>\n"],["framework_version","Rails::Info","classes/Rails/Info.html#method-i-framework_version","(framework)",""],["frameworks","Rails::Info","classes/Rails/Info.html#method-i-frameworks","()",""],["from_json","ActiveModel::Serializers::JSON","classes/ActiveModel/Serializers/JSON.html#method-i-from_json","(json, include_root=include_root_in_json)","<p>Sets the model <code>attributes</code> from a JSON string. Returns\n<code>self</code>.\n\n<pre><code>class Person\n  include ActiveModel::Serializers::JSON ...\n</code></pre>\n"],["from_xml","ActiveModel::Serializers::Xml","classes/ActiveModel/Serializers/Xml.html#method-i-from_xml","(xml)","<p>Sets the model <code>attributes</code> from a JSON string. Returns\n<code>self</code>.\n\n<pre><code>class Person\n  include ActiveModel::Serializers::Xml ...\n</code></pre>\n"],["full_message","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-full_message","(attribute, message)","<p>Returns a full message for a given attribute.\n\n<pre><code>person.errors.full_message(:name, 'is invalid') # =&gt; &quot;Name ...\n</code></pre>\n"],["full_messages","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-full_messages","()","<p>Returns all the full error messages in an array.\n\n<pre><code>class Person\n  validates_presence_of :name, :address, ...\n</code></pre>\n"],["full_messages_for","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-full_messages_for","(attribute)","<p>Returns all the full error messages for a given attribute in an array.\n\n<pre><code>class Person\n  validates_presence_of ...\n</code></pre>\n"],["gem","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-gem","(*args)","<p>Adds an entry into Gemfile for the supplied gem.\n\n<pre><code>gem &quot;rspec&quot;, group: :test\ngem &quot;technoweenie-restful-authentication&quot;, ...</code></pre>\n"],["gem_group","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-gem_group","(*names, &block)","<p>Wraps gem entries inside a group.\n\n<pre><code>gem_group :development, :test do\n  gem &quot;rspec-rails&quot;\nend</code></pre>\n"],["gemfile","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-gemfile","()",""],["gemfile","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-gemfile","()",""],["gemfile_entry","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-gemfile_entry","()",""],["gemspec","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-gemspec","()",""],["generate","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-generate","(what, *args)","<p>Generate something using a generator from Rails or a plugin. The second\nparameter is the argument string …\n"],["generate_message","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-generate_message","(attribute, type = :invalid, options = {})","<p>Translates an error message in its default scope\n(<code>activemodel.errors.messages</code>).\n<p>Error messages are first …\n"],["generate_railtie_name","Rails::Railtie","classes/Rails/Railtie.html#method-i-generate_railtie_name","(class_or_module)",""],["generate_test_dummy","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-generate_test_dummy","(force = false)",""],["generator","Rails::Generators::Testing::Behaviour","classes/Rails/Generators/Testing/Behaviour.html#method-i-generator","(args=self.default_arguments, options={}, config={})","<p>Instantiate the generator.\n"],["generator_name","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-generator_name","()","<p>Removes the namespaces and get the generator name. For example,\nRails::Generators::ModelGenerator will …\n"],["generators","Rails::Railtie","classes/Rails/Railtie.html#method-i-generators","(&blk)",""],["get","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-get","(key)","<p>Get messages for <code>key</code>.\n\n<pre><code>person.errors.messages   # =&gt; {:name=&gt;[&quot;can not be nil&quot;]}\nperson.errors.get(:name) ...\n</code></pre>\n"],["git","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-git","(commands={})","<p>Run a command in git.\n\n<pre><code>git :init\ngit add: &quot;this.file that.rb&quot;\ngit add: &quot;onefile.rb&quot;, rm: &quot;badfile.cxx&quot;</code></pre>\n"],["gitignore","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-gitignore","()",""],["gitignore","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-gitignore","()",""],["groups","Rails","classes/Rails.html#method-i-groups","(*groups)","<p>Returns all rails groups for loading based on:\n<p>The Rails environment;\n<p>The environment variable RAILS_GROUPS …\n"],["has_key?","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-has_key-3F","(attribute)","<p>aliases include?\n"],["has_secure_password","ActiveModel::SecurePassword::ClassMethods","classes/ActiveModel/SecurePassword/ClassMethods.html#method-i-has_secure_password","(options = {})","<p>Adds methods to set and authenticate against a BCrypt password. This\nmechanism requires you to have a …\n"],["headers","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-headers","(args = nil)","<p>Allows you to pass random and unusual headers to the new\n<code>Mail::Message</code> object which will add them to …\n"],["help","Rails::Generators","classes/Rails/Generators.html#method-c-help","(command = 'generate')","<p>Show help message with available generators.\n"],["helper","Rails::ConsoleMethods","classes/Rails/ConsoleMethods.html#method-i-helper","()",""],["helpers","Rails::Engine","classes/Rails/Engine.html#method-i-helpers","()","<p>Returns a module with all the helpers defined for the engine.\n"],["helpers_paths","Rails::Engine","classes/Rails/Engine.html#method-i-helpers_paths","()","<p>Returns all registered helpers paths.\n"],["hidden_namespaces","Rails::Generators","classes/Rails/Generators.html#method-c-hidden_namespaces","()",""],["hide!","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-hide-21","()","<p>Convenience method to hide this generator from the available ones when\nrunning rails generator command. …\n"],["hide_namespaces","Rails::Generators","classes/Rails/Generators.html#method-i-hide_namespaces","(*namespaces)",""],["hook_for","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-hook_for","(*names, &block)","<p>Invoke a generator based on the value supplied by the user to the given\noption named “name”. …\n"],["human","ActiveModel::Name","classes/ActiveModel/Name.html#method-i-human","(options={})","<p>Transform the model name into a more humane format, using I18n. By default,\nit will underscore then humanize …\n"],["human_attribute_name","ActiveModel::Translation","classes/ActiveModel/Translation.html#method-i-human_attribute_name","(attribute, options = {})","<p>Transforms attribute names into a more human format, such as “First name”\ninstead of “first_name”. …\n"],["human_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-human_name","()",""],["i18n_scope","ActiveModel::Translation","classes/ActiveModel/Translation.html#method-i-i18n_scope","()","<p>Returns the <code>i18n_scope</code> for the class. Overwrite if you want\ncustom lookup.\n"],["i18n_scope","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-i18n_scope","()",""],["include?","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-include-3F","(attribute)","<p>Returns <code>true</code> if the error messages include an error for the\ngiven key <code>attribute</code>, <code>false</code> otherwise.\n\n<pre><code>person.errors.messages ...</code></pre>\n"],["increment","ActiveSupport::Cache::RedisStore","classes/ActiveSupport/Cache/RedisStore.html#method-i-increment","(key, amount = 1)","<p>Increment a key in the store.\n<p>If the key doesn’t exist it will be initialized on 0. If the key exist but\n…\n"],["indent","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-indent","(content, multiplier = 2)",""],["index_helper","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-index_helper","()",""],["inherited","Rails::Application","classes/Rails/Application.html#method-i-inherited","(base)",""],["inherited","Rails::Engine","classes/Rails/Engine.html#method-i-inherited","(base)",""],["inherited","Rails::Railtie","classes/Rails/Railtie.html#method-i-inherited","(base)",""],["inherited","Rails::Railtie::Configurable::ClassMethods","classes/Rails/Railtie/Configurable/ClassMethods.html#method-i-inherited","(base)",""],["initialize!","Rails","classes/Rails.html#method-i-initialize-21","()",""],["initialize_test_deliveries","ActionMailer::TestCase::Behavior","classes/ActionMailer/TestCase/Behavior.html#method-i-initialize_test_deliveries","()",""],["initialized?","Rails","classes/Rails.html#method-i-initialized-3F","()",""],["initialized?","Rails::Application","classes/Rails/Application.html#method-i-initialized-3F","()","<p>Returns true if the application is initialized.\n"],["initializer","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-initializer","(filename, data=nil, &block)","<p>Create a new initializer with the provided code (either in a block or a\nstring).\n\n<pre><code>initializer(&quot;globals.rb&quot;) ...</code></pre>\n"],["initializer","Rails::Initializable::ClassMethods","classes/Rails/Initializable/ClassMethods.html#method-i-initializer","(name, opts = {}, &blk)",""],["initializers","Rails::Initializable","classes/Rails/Initializable.html#method-i-initializers","()",""],["initializers","Rails::Initializable::ClassMethods","classes/Rails/Initializable/ClassMethods.html#method-i-initializers","()",""],["initializers_chain","Rails::Initializable::ClassMethods","classes/Rails/Initializable/ClassMethods.html#method-i-initializers_chain","()",""],["initializers_for","Rails::Initializable::ClassMethods","classes/Rails/Initializable/ClassMethods.html#method-i-initializers_for","(binding)",""],["insert","Rails::Configuration::MiddlewareStackProxy","classes/Rails/Configuration/MiddlewareStackProxy.html#method-i-insert","(*args, &block)",""],["insert_after","Rails::Configuration::MiddlewareStackProxy","classes/Rails/Configuration/MiddlewareStackProxy.html#method-i-insert_after","(*args, &block)",""],["insert_before","Rails::Configuration::MiddlewareStackProxy","classes/Rails/Configuration/MiddlewareStackProxy.html#method-i-insert_before","(*args, &block)",""],["inside_template","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-inside_template","()",""],["inside_template?","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-inside_template-3F","()",""],["instance","Rails::Railtie::Configurable::ClassMethods","classes/Rails/Railtie/Configurable/ClassMethods.html#method-i-instance","()",""],["invalid?","ActiveModel::Validations","classes/ActiveModel/Validations.html#method-i-invalid-3F","(context = nil)","<p>Performs the opposite of <code>valid?</code>. Returns <code>true</code> if\nerrors were added, <code>false</code> otherwise.\n\n<pre><code>class Person\n  include ...\n</code></pre>\n"],["invoke","Rails::Generators","classes/Rails/Generators.html#method-c-invoke","(namespace, args=ARGV, config={})","<p>Receives a namespace, arguments and the behavior to invoke the generator.\nIt’s used as the default entry …\n"],["isolate_namespace","Rails::Engine","classes/Rails/Engine.html#method-i-isolate_namespace","(mod)",""],["javascripts","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-javascripts","()",""],["key_generator","Rails::Application","classes/Rails/Application.html#method-i-key_generator","()","<p>Return the application’s KeyGenerator\n"],["key_matcher","ActiveSupport::Cache::RedisStore","classes/ActiveSupport/Cache/RedisStore.html#method-i-key_matcher","(pattern, options)","<p>Add the namespace defined in the options to a pattern designed to match\nkeys.\n<p>This implementation is __different__ …\n"],["keys","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-keys","()","<p>Returns all message keys.\n\n<pre><code>person.errors.messages # =&gt; {:name=&gt;[&quot;can not be nil&quot;, &quot;must be specified&quot;]} ...\n</code></pre>\n"],["keys","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-keys","()",""],["kind","ActiveModel::Validator","classes/ActiveModel/Validator.html#method-c-kind","()","<p>Returns the kind of the validator.\n\n<pre><code>PresenceValidator.kind   # =&gt; :presence\nUniquenessValidator.kind # ...\n</code></pre>\n"],["kind","ActiveModel::Validator","classes/ActiveModel/Validator.html#method-i-kind","()","<p>Return the kind for this validator.\n\n<pre><code>PresenceValidator.new.kind   # =&gt; :presence\nUniquenessValidator.new.kind ...\n</code></pre>\n"],["last","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-last","()",""],["lib","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-lib","()",""],["lib","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-lib","(filename, data=nil, &block)","<p>Create a new file in the lib/ directory. Code can be specified in a block\nor a data string can be given. …\n"],["lib","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-lib","()",""],["license","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-license","()",""],["load_and_configure_sdoc","Rails::API::RepoTask","classes/Rails/API/RepoTask.html#method-i-load_and_configure_sdoc","()",""],["load_and_configure_sdoc","Rails::API::Task","classes/Rails/API/Task.html#method-i-load_and_configure_sdoc","()",""],["load_console","Rails::Engine","classes/Rails/Engine.html#method-i-load_console","(app=self)","<p>Load console and invoke the registered hooks. Check\n<code>Rails::Railtie.console</code> for more info.\n"],["load_generators","Rails::Engine","classes/Rails/Engine.html#method-i-load_generators","(app=self)","<p>Load rails generators and invoke the registered hooks. Check\n<code>Rails::Railtie.generators</code> for more info. …\n"],["load_paths","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-load_paths","()",""],["load_rack_cache","Rails::Application","classes/Rails/Application.html#method-i-load_rack_cache","()",""],["load_runner","Rails::Engine","classes/Rails/Engine.html#method-i-load_runner","(app=self)","<p>Load Rails runner and invoke the registered hooks. Check\n<code>Rails::Railtie.runner</code> for more info.\n"],["load_seed","Rails::Engine","classes/Rails/Engine.html#method-i-load_seed","()","<p>Load data from db/seeds.rb file. It can be used in to load engines’ seeds,\ne.g.:\n<p>Blog::Engine.load_seed …\n"],["load_tasks","Rails::Engine","classes/Rails/Engine.html#method-i-load_tasks","(app=self)","<p>Load Rake, railties tasks and invoke the registered hooks. Check\n<code>Rails::Railtie.rake_tasks</code> for more info. …\n"],["log","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-log","()",""],["log","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-log","(*args)","<p>Define log for backwards compatibility. If just one argument is sent,\ninvoke say, otherwise invoke say_status. …\n"],["log_level","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-log_level","()",""],["log_path","Rails::Server","classes/Rails/Server.html#method-i-log_path","()",""],["logger","ActionMailer::LogSubscriber","classes/ActionMailer/LogSubscriber.html#method-i-logger","()",""],["lookup_ancestors","ActiveModel::Translation","classes/ActiveModel/Translation.html#method-i-lookup_ancestors","()","<p>When localizing a string, it goes through the lookup returned by this\nmethod, which is used in ActiveModel::Name#human …\n"],["mail","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-mail","(headers = {}, &block)","<p>The main method that creates the message and renders the email templates.\nThere are two ways to call …\n"],["mailer","ActionMailer::MailHelper","classes/ActionMailer/MailHelper.html#method-i-mailer","()","<p>Access the mailer instance.\n"],["mailer_class","ActionMailer::TestCase::Behavior::ClassMethods","classes/ActionMailer/TestCase/Behavior/ClassMethods.html#method-i-mailer_class","()",""],["mailer_name","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-mailer_name","()",""],["message","ActionMailer::MailHelper","classes/ActionMailer/MailHelper.html#method-i-message","()","<p>Access the message instance.\n"],["method_missing","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-method_missing","(method_name, *args)",""],["method_missing","ActiveModel::AttributeMethods","classes/ActiveModel/AttributeMethods.html#method-i-method_missing","(method, *args, &block)","<p>Allows access to the object attributes, which are held in the hash returned\nby <code>attributes</code>, as though …\n"],["method_missing","Rails::Railtie::Configurable::ClassMethods","classes/Rails/Railtie/Configurable/ClassMethods.html#method-i-method_missing","(*args, &block)",""],["middleware","Rails::Engine::Configuration","classes/Rails/Engine/Configuration.html#method-i-middleware","()","<p>Returns the middleware stack for the engine.\n"],["middleware","Rails::Server","classes/Rails/Server.html#method-i-middleware","()",""],["migration_template","Rails::Generators::Migration","classes/Rails/Generators/Migration.html#method-i-migration_template","(source, destination=nil, config={})","<p>Creates a migration template at the given destination. The difference to\nthe default template method …\n"],["model_name","ActiveModel::Naming","classes/ActiveModel/Naming.html#method-i-model_name","()","<p>Returns an ActiveModel::Name object for module. It can be used to retrieve\nall kinds of naming-related …\n"],["module_namespacing","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-module_namespacing","(&block)","<p>Wrap block with namespace of current application if namespace exists and is\nnot skipped\n"],["namespace","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-namespace","(name=nil)","<p>Convenience method to get the namespace from the class name. It’s the same\nas Thor default except that …\n"],["namespace","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-namespace","()",""],["namespaced?","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-namespaced-3F","()",""],["namespaced_class_path","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-namespaced_class_path","()",""],["namespaced_file_path","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-namespaced_file_path","()",""],["namespaced_path","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-namespaced_path","()",""],["new","ActionDispatch::Session::RedisStore","classes/ActionDispatch/Session/RedisStore.html#method-c-new","(app, options = {})",""],["new","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-new","(method_name=nil, *args)","<p>Instantiate a new mailer object. If <code>method_name</code> is not\n<code>nil</code>, the mailer will be initialized according …\n"],["new","ActionMailer::Collector","classes/ActionMailer/Collector.html#method-c-new","(context, &block)",""],["new","ActionMailer::NonInferrableMailerError","classes/ActionMailer/NonInferrableMailerError.html#method-c-new","(name)",""],["new","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-c-new","(base)","<p>Pass in the instance of the object that is using the errors object.\n\n<pre><code>class Person\n  def initialize\n    ...\n</code></pre>\n"],["new","ActiveModel::Model","classes/ActiveModel/Model.html#method-c-new","(params={})","<p>Initializes a new model with the given <code>params</code>.\n\n<pre><code>class Person\n  include ActiveModel::Model\n  attr_accessor ...\n</code></pre>\n"],["new","ActiveModel::Name","classes/ActiveModel/Name.html#method-c-new","(klass, namespace = nil, name = nil)","<p>Returns a new ActiveModel::Name instance. By default, the\n<code>namespace</code> and <code>name</code> option will take the namespace\n…\n"],["new","ActiveModel::Validator","classes/ActiveModel/Validator.html#method-c-new","(options = {})","<p>Accepts options that will be made available through the\n<code>options</code> reader.\n"],["new","ActiveSupport::Cache::RedisStore","classes/ActiveSupport/Cache/RedisStore.html#method-c-new","(*addresses)","<p>Instantiate the store.\n<p>Example:\n\n<pre><code>RedisStore.new\n  # =&gt; host: localhost,   port: 6379,  db: 0\n\nRedisStore.new ...\n</code></pre>\n"],["new","Rails::API::Task","classes/Rails/API/Task.html#method-c-new","(name)",""],["new","Rails::Application","classes/Rails/Application.html#method-c-new","()",""],["new","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-c-new","(*)",""],["new","Rails::Application::RoutesReloader","classes/Rails/Application/RoutesReloader.html#method-c-new","()",""],["new","Rails::BacktraceCleaner","classes/Rails/BacktraceCleaner.html#method-c-new","()",""],["new","Rails::Configuration::MiddlewareStackProxy","classes/Rails/Configuration/MiddlewareStackProxy.html#method-c-new","()",""],["new","Rails::Console","classes/Rails/Console.html#method-c-new","(app, options={})",""],["new","Rails::DBConsole","classes/Rails/DBConsole.html#method-c-new","(arguments = ARGV)",""],["new","Rails::Engine","classes/Rails/Engine.html#method-c-new","()",""],["new","Rails::Engine::Configuration","classes/Rails/Engine/Configuration.html#method-c-new","(root=nil)",""],["new","Rails::Engine::Railties","classes/Rails/Engine/Railties.html#method-c-new","()",""],["new","Rails::Generators::ActiveModel","classes/Rails/Generators/ActiveModel.html#method-c-new","(name)",""],["new","Rails::Initializable::Initializer","classes/Rails/Initializable/Initializer.html#method-c-new","(name, context, options, &block)",""],["new","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-c-new","(root, current, paths, options = {})",""],["new","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-c-new","(path)",""],["new","Rails::Rack::Debugger","classes/Rails/Rack/Debugger.html#method-c-new","(app)",""],["new","Rails::Rack::LogTailer","classes/Rails/Rack/LogTailer.html#method-c-new","(app, log = nil)",""],["new","Rails::Rack::Logger","classes/Rails/Rack/Logger.html#method-c-new","(app, taggers = nil)",""],["new","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-c-new","()",""],["new","Rails::Server","classes/Rails/Server.html#method-c-new","(*)",""],["new","SourceAnnotationExtractor","classes/SourceAnnotationExtractor.html#method-c-new","(tag)",""],["new_session","Rails::ConsoleMethods","classes/Rails/ConsoleMethods.html#method-i-new_session","()","<p>create a new session. If a block is given, the new session will be yielded\nto the block before being …\n"],["no_color!","Rails::Generators","classes/Rails/Generators.html#method-c-no_color-21","()","<p>Remove the color from output.\n"],["opt_parser","Rails::Server","classes/Rails/Server.html#method-i-opt_parser","()",""],["param_key","ActiveModel::Naming","classes/ActiveModel/Naming.html#method-c-param_key","(record_or_class)","<p>Returns string to use for params names. It differs for namespaced models\nregarding whether it’s inside …\n"],["parse!","Rails::Server::Options","classes/Rails/Server/Options.html#method-i-parse-21","(args)",""],["parse_arguments","Rails::Console","classes/Rails/Console.html#method-i-parse_arguments","(arguments)",""],["parse_arguments","Rails::DBConsole","classes/Rails/DBConsole.html#method-i-parse_arguments","(arguments)",""],["password=","ActiveModel::SecurePassword::InstanceMethodsOnActivation","classes/ActiveModel/SecurePassword/InstanceMethodsOnActivation.html#method-i-password-3D","(unencrypted_password)","<p>Encrypts the password into the <code>password_digest</code> attribute, only\nif the new password is not blank.\n\n<pre><code>class ...\n</code></pre>\n"],["password_confirmation=","ActiveModel::SecurePassword::InstanceMethodsOnActivation","classes/ActiveModel/SecurePassword/InstanceMethodsOnActivation.html#method-i-password_confirmation-3D","(unencrypted_password)",""],["paths","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-paths","()",""],["paths","Rails::Engine::Configuration","classes/Rails/Engine/Configuration.html#method-i-paths","()",""],["persisted?","ActiveModel::Model","classes/ActiveModel/Model.html#method-i-persisted-3F","()","<p>Indicates if the model is persisted. Default is <code>false</code>.\n\n<pre><code>class Person\n  include ActiveModel::Model\n  attr_accessor ...\n</code></pre>\n"],["plural","ActiveModel::Naming","classes/ActiveModel/Naming.html#method-c-plural","(record_or_class)","<p>Returns the plural class name of a record or class.\n\n<pre><code>ActiveModel::Naming.plural(post)             # =&gt; ...\n</code></pre>\n"],["plural_file_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-plural_file_name","()",""],["plural_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-plural_name","()",""],["plural_table_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-plural_table_name","()",""],["pluralize_table_names?","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-pluralize_table_names-3F","()",""],["previous_changes","ActiveModel::Dirty","classes/ActiveModel/Dirty.html#method-i-previous_changes","()","<p>Returns a hash of attributes that were changed before the model was saved.\n\n<pre><code>person.name # =&gt; &quot;bob&quot;\nperson.name ...\n</code></pre>\n"],["property","Rails::Info","classes/Rails/Info.html#method-i-property","(name, value = nil)",""],["public_directory","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-public_directory","()",""],["public_path","Rails","classes/Rails.html#method-i-public_path","()",""],["push","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-push","(path)",""],["rails_version","Rails::API::AppTask","classes/Rails/API/AppTask.html#method-i-rails_version","()",""],["rails_version","Rails::API::RepoTask","classes/Rails/API/RepoTask.html#method-i-rails_version","()",""],["railtie_name","Rails::Railtie","classes/Rails/Railtie.html#method-i-railtie_name","(name = nil)",""],["railtie_namespace","Rails::Railtie","classes/Rails/Railtie.html#method-i-railtie_namespace","()",""],["railties","Rails::Engine","classes/Rails/Engine.html#method-i-railties","()",""],["rake","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-rake","(command, options={})","<p>Runs the supplied rake task\n\n<pre><code>rake(&quot;db:migrate&quot;)\nrake(&quot;db:migrate&quot;, env: &quot;production&quot;)\nrake(&quot;gems:install&quot;, ...</code></pre>\n"],["rake_tasks","Rails::Railtie","classes/Rails/Railtie.html#method-i-rake_tasks","(&blk)",""],["rakefile","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-rakefile","()",""],["rakefile","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-rakefile","(filename, data=nil, &block)","<p>Create a new Rakefile with the provided code (either in a block or a\nstring).\n\n<pre><code>rakefile(&quot;bootstrap.rake&quot;) ...</code></pre>\n"],["rakefile","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-rakefile","()",""],["read_entry","ActiveSupport::Cache::RedisStore","classes/ActiveSupport/Cache/RedisStore.html#method-i-read_entry","(key, options)",""],["read_multi","ActiveSupport::Cache::RedisStore","classes/ActiveSupport/Cache/RedisStore.html#method-i-read_multi","(*names)","<p>Reads multiple keys from the cache using a single call to the servers for\nall keys. Options can be passed …\n"],["readme","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-readme","()",""],["readme","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-readme","(path)","<p>Reads the given file at the source root and prints it in the console.\n\n<pre><code>readme &quot;README&quot;</code></pre>\n"],["readme","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-readme","()",""],["receive","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-receive","(raw_mail)","<p>Receives a raw email, parses it into an email object, decodes it,\ninstantiates a new mailer, and passes …\n"],["receive","ActionMailer::LogSubscriber","classes/ActionMailer/LogSubscriber.html#method-i-receive","(event)",""],["reconnect","ActiveSupport::Cache::RedisStore","classes/ActiveSupport/Cache/RedisStore.html#method-i-reconnect","()","<p>Force client reconnection, useful Unicorn deployed apps.\n"],["register_interceptor","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-register_interceptor","(interceptor)","<p>Register an Interceptor which will be called before mail is sent. Either a\nclass or a string can be passed …\n"],["register_interceptors","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-register_interceptors","(*interceptors)","<p>Register one or more Interceptors which will be called before mail is sent.\n"],["register_observer","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-register_observer","(observer)","<p>Register an Observer which will be notified when mail is delivered. Either\na class or a string can be …\n"],["register_observers","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-register_observers","(*observers)","<p>Register one or more Observers which will be notified when mail is\ndelivered.\n"],["regular_class_path","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-regular_class_path","()",""],["reload!","Rails::Application::RoutesReloader","classes/Rails/Application/RoutesReloader.html#method-i-reload-21","()",""],["reload!","Rails::ConsoleMethods","classes/Rails/ConsoleMethods.html#method-i-reload-21","(print=true)","<p>reloads the environment\n"],["reload_routes!","Rails::Application","classes/Rails/Application.html#method-i-reload_routes-21","()","<p>Reload application routes regardless if they changed or not.\n"],["remove_hook_for","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-remove_hook_for","(*names)","<p>Remove a previously added hook.\n\n<pre><code>remove_hook_for :orm</code></pre>\n"],["require_debugger","Rails::Console","classes/Rails/Console.html#method-i-require_debugger","()",""],["respond_to?","ActiveModel::AttributeMethods","classes/ActiveModel/AttributeMethods.html#method-i-respond_to-3F","(method, include_private_methods = false)",""],["respond_to?","Rails::Railtie::Configurable::ClassMethods","classes/Rails/Railtie/Configurable/ClassMethods.html#method-i-respond_to-3F","(*args)",""],["respond_to?","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-respond_to-3F","(name)",""],["respond_to_without_attributes?","ActiveModel::AttributeMethods","classes/ActiveModel/AttributeMethods.html#method-i-respond_to_without_attributes-3F","(method, include_private_methods = false)","<p>A <code>Person</code> instance with a <code>name</code> attribute can ask\n<code>person.respond_to?(:name)</code>,\n<code>person.respond_to?(:name=)</code> …\n"],["root","Rails","classes/Rails.html#method-i-root","()",""],["root=","Rails::Engine::Configuration","classes/Rails/Engine/Configuration.html#method-i-root-3D","(value)",""],["route","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-route","(routing_code)","<p>Make an entry in Rails routing file config/routes.rb\n\n<pre><code>route &quot;root 'welcome#index'&quot;</code></pre>\n"],["route_key","ActiveModel::Naming","classes/ActiveModel/Naming.html#method-c-route_key","(record_or_class)","<p>Returns string to use while generating route names. It differs for\nnamespaced models regarding whether …\n"],["route_url","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-route_url","()",""],["routes","Rails::Engine","classes/Rails/Engine.html#method-i-routes","()","<p>Defines the routes for this engine. If a block is given to routes, it is\nappended to the engine.\n"],["run","Rails::Initializable::Initializer","classes/Rails/Initializable/Initializer.html#method-i-run","(*args)",""],["run_generator","Rails::Generators::Testing::Behaviour","classes/Rails/Generators/Testing/Behaviour.html#method-i-run_generator","(args=self.default_arguments, config={})","<p>Runs the generator configured for this class. The first argument is an\narray like command line arguments: …\n"],["run_initializers","Rails::Initializable","classes/Rails/Initializable.html#method-i-run_initializers","(group=:default, *args)",""],["runner","Rails::Railtie","classes/Rails/Railtie.html#method-i-runner","(&blk)",""],["sandbox?","Rails::Console","classes/Rails/Console.html#method-i-sandbox-3F","()",""],["save","Rails::Generators::ActiveModel","classes/Rails/Generators/ActiveModel.html#method-i-save","()","<p>POST create\n"],["serializable_hash","ActiveModel::Serialization","classes/ActiveModel/Serialization.html#method-i-serializable_hash","(options = nil)","<p>Returns a serialized hash of your object.\n\n<pre><code>class Person\n  include ActiveModel::Serialization\n\n  attr_accessor ...\n</code></pre>\n"],["session_store","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-session_store","(*args)",""],["set","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-set","(key, value)","<p>Set messages for <code>key</code> to <code>value</code>.\n\n<pre><code>person.errors.get(:name) # =&gt; [&quot;can not be nil&quot;]\nperson.errors.set(:name, ...\n</code></pre>\n"],["set_content_type","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-set_content_type","(m, user_content_type, class_default)",""],["set_environment","Rails::Server","classes/Rails/Server.html#method-i-set_environment","()",""],["set_environment!","Rails::Console","classes/Rails/Console.html#method-i-set_environment-21","()",""],["set_expected_mail","ActionMailer::TestCase::Behavior","classes/ActionMailer/TestCase/Behavior.html#method-i-set_expected_mail","()",""],["setup_horo_variables","Rails::API::Task","classes/Rails/API/Task.html#method-i-setup_horo_variables","()",""],["show_exceptions_app","Rails::Application","classes/Rails/Application.html#method-i-show_exceptions_app","()",""],["singular","ActiveModel::Naming","classes/ActiveModel/Naming.html#method-c-singular","(record_or_class)","<p>Returns the singular class name of a record or class.\n\n<pre><code>ActiveModel::Naming.singular(post)             # ...</code></pre>\n"],["singular_route_key","ActiveModel::Naming","classes/ActiveModel/Naming.html#method-c-singular_route_key","(record_or_class)","<p>Returns string to use while generating route names. It differs for\nnamespaced models regarding whether …\n"],["singular_table_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-singular_table_name","()",""],["size","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-size","()","<p>Returns the number of error messages.\n\n<pre><code>person.errors.add(:name, &quot;can't be blank&quot;)\nperson.errors.size # ...</code></pre>\n"],["source_root","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-source_root","(path=nil)","<p>Returns the source root for this generator using default_source_root as\ndefault.\n"],["start","Rails::Console","classes/Rails/Console.html#method-i-start","(*args)",""],["start","Rails::DBConsole","classes/Rails/DBConsole.html#method-c-start","()",""],["start","Rails::DBConsole","classes/Rails/DBConsole.html#method-i-start","()",""],["start","Rails::Server","classes/Rails/Server.html#method-i-start","()",""],["started_request_message","Rails::Rack::Logger","classes/Rails/Rack/Logger.html#method-i-started_request_message","(request)","<p>Started GET “/session/new” for 127.0.0.1 at 2012-09-26 14:51:42 -0700\n"],["stats","ActiveSupport::Cache::RedisStore","classes/ActiveSupport/Cache/RedisStore.html#method-i-stats","()",""],["stylesheets","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-stylesheets","()",""],["subclasses","Rails::Generators","classes/Rails/Generators.html#method-c-subclasses","()","<p>Track all generators subclasses.\n"],["subclasses","Rails::Railtie","classes/Rails/Railtie.html#method-i-subclasses","()",""],["swap","Rails::Configuration::MiddlewareStackProxy","classes/Rails/Configuration/MiddlewareStackProxy.html#method-i-swap","(*args, &block)",""],["table_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-table_name","()",""],["tail!","Rails::Rack::LogTailer","classes/Rails/Rack/LogTailer.html#method-i-tail-21","()",""],["template","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-template","(source, *args, &block)",""],["test","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-test","()",""],["test","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-test","()",""],["test_dummy_assets","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-test_dummy_assets","()",""],["test_dummy_clean","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-test_dummy_clean","()",""],["test_dummy_config","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-test_dummy_config","()",""],["test_errors_aref","ActiveModel::Lint::Tests","classes/ActiveModel/Lint/Tests.html#method-i-test_errors_aref","()","<p>Errors Testing\n<p>Returns an object that implements [](attribute) defined which returns an\nArray of Strings …\n"],["test_model_naming","ActiveModel::Lint::Tests","classes/ActiveModel/Lint/Tests.html#method-i-test_model_naming","()","<p>Naming\n<p>Model.model_name must return a string with some convenience methods:\n<code>:human</code>, <code>:singular</code> and <code>:plural</code> …\n"],["test_persisted?","ActiveModel::Lint::Tests","classes/ActiveModel/Lint/Tests.html#method-i-test_persisted-3F","()","<p>Responds to <code>persisted?</code>\n<p>Returns a boolean that specifies whether the object has been persisted yet.\nThis …\n"],["test_to_key","ActiveModel::Lint::Tests","classes/ActiveModel/Lint/Tests.html#method-i-test_to_key","()","<p>Responds to <code>to_key</code>\n<p>Returns an Enumerable of all (primary) key attributes or nil if\n<code>model.persisted?</code> is …\n"],["test_to_param","ActiveModel::Lint::Tests","classes/ActiveModel/Lint/Tests.html#method-i-test_to_param","()","<p>Responds to <code>to_param</code>\n<p>Returns a string representing the object’s key suitable for use in URLs or\n<code>nil</code> if …\n"],["test_to_partial_path","ActiveModel::Lint::Tests","classes/ActiveModel/Lint/Tests.html#method-i-test_to_partial_path","()","<p>Responds to <code>to_partial_path</code>\n<p>Returns a string giving a relative path. This is used for looking up\npartials. …\n"],["tests","ActionMailer::TestCase::Behavior::ClassMethods","classes/ActionMailer/TestCase/Behavior/ClassMethods.html#method-i-tests","(mailer)",""],["tests","Rails::Generators::Testing::Behaviour::ClassMethods","classes/Rails/Generators/Testing/Behaviour/ClassMethods.html#method-i-tests","(klass)","<p>Sets which generator should be tested:\n\n<pre><code>tests AppGenerator</code></pre>\n"],["threadsafe!","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-threadsafe-21","()",""],["tmp","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-tmp","()",""],["to_a","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-to_a","()","<p>Returns an array of error messages, with the attribute name included.\n\n<pre><code>person.errors.add(:name, &quot;can't ...</code></pre>\n"],["to_a","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-to_a","()",""],["to_ary","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-to_ary","()",""],["to_hash","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-to_hash","(full_messages = false)","<p>Returns a Hash of attributes with their error messages. If\n<code>full_messages</code> is <code>true</code>, it will contain full …\n"],["to_html","Rails::Info","classes/Rails/Info.html#method-i-to_html","()",""],["to_key","ActiveModel::Conversion","classes/ActiveModel/Conversion.html#method-i-to_key","()","<p>Returns an Enumerable of all key attributes if any is set, regardless if\nthe object is persisted or not. …\n"],["to_model","ActiveModel::Conversion","classes/ActiveModel/Conversion.html#method-i-to_model","()","<p>If your object is already designed to implement all of the Active Model you\ncan use the default <code>:to_model</code> …\n"],["to_param","ActiveModel::Conversion","classes/ActiveModel/Conversion.html#method-i-to_param","()","<p>Returns a <code>string</code> representing the object’s key suitable for\nuse in URLs, or <code>nil</code> if <code>persisted?</code> is\n<code>false</code> …\n"],["to_partial_path","ActiveModel::Conversion","classes/ActiveModel/Conversion.html#method-i-to_partial_path","()","<p>Returns a <code>string</code> identifying the path associated with the\nobject. ActionPack uses this to find a suitable …\n"],["to_prepare","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-to_prepare","(&blk)","<p>Defines generic callbacks to run before #after_initialize. Useful for\nRails::Railtie subclasses.\n"],["to_prepare_blocks","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-to_prepare_blocks","()","<p>Array of callbacks defined by #to_prepare.\n"],["to_s","ActiveModel::Name","classes/ActiveModel/Name.html#method-i-to_s","","<p>Returns the class name.\n\n<pre><code>class BlogPost\n  extend ActiveModel::Naming\nend\n\nBlogPost.model_name.to_s # =&gt; ...\n</code></pre>\n"],["to_s","Rails::Info","classes/Rails/Info.html#method-i-to_s","()",""],["to_s","SourceAnnotationExtractor::Annotation","classes/SourceAnnotationExtractor/Annotation.html#method-i-to_s","(options={})","<p>Returns a representation of the annotation that looks like this:\n\n<pre><code>[126] [TODO] This algorithm is simple ...</code></pre>\n"],["to_str","ActiveModel::Name","classes/ActiveModel/Name.html#method-i-to_str","","<p>Equivalent to <code>to_s</code>.\n"],["to_xml","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-to_xml","(options={})","<p>Returns an xml formatted representation of the Errors hash.\n\n<pre><code>person.errors.add(:name, &quot;can't be blank&quot;) ...</code></pre>\n"],["to_xml","ActiveModel::Serializers::Xml","classes/ActiveModel/Serializers/Xml.html#method-i-to_xml","(options = {}, &block)","<p>Returns XML representing the model. Configuration can be passed through\n<code>options</code>.\n<p>Without any <code>options</code>, …\n"],["tsort_each_child","Rails::Initializable::Collection","classes/Rails/Initializable/Collection.html#method-i-tsort_each_child","(initializer, &block)",""],["uncountable?","ActiveModel::Naming","classes/ActiveModel/Naming.html#method-c-uncountable-3F","(record_or_class)","<p>Identifies whether the class name of a record or class is uncountable.\n\n<pre><code>ActiveModel::Naming.uncountable?(Sheep) ...</code></pre>\n"],["uncountable?","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-uncountable-3F","()",""],["unshift","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-unshift","(path)",""],["update","Rails::Generators::ActiveModel","classes/Rails/Generators/ActiveModel.html#method-i-update","(params=nil)","<p>PATCH/PUT update\n"],["usage_path","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-usage_path","()",""],["use","Rails::Configuration::MiddlewareStackProxy","classes/Rails/Configuration/MiddlewareStackProxy.html#method-i-use","(*args, &block)",""],["valid?","ActiveModel::Validations","classes/ActiveModel/Validations.html#method-i-valid-3F","(context = nil)","<p>Runs all the specified validations and returns <code>true</code> if no\nerrors were added otherwise <code>false</code>.\n\n<pre><code>class Person ...\n</code></pre>\n"],["validate","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-validate","(*args, &block)","<p>Adds a validation method or block to the class. This is useful when\noverriding the <code>validate</code> instance …\n"],["validate","ActiveModel::Validator","classes/ActiveModel/Validator.html#method-i-validate","(record)","<p>Override this method in subclasses with validation logic, adding errors to\nthe records <code>errors</code> array where …\n"],["validates","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-validates","(*attributes)","<p>This method is a shortcut to all default validators and any custom\nvalidator classes ending in ‘Validator’. …\n"],["validates!","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-validates-21","(*attributes)","<p>This method is used to define validations that cannot be corrected by end\nusers and are considered exceptional. …\n"],["validates_absence_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_absence_of","(*attr_names)","<p>Validates that the specified attributes are blank (as defined by\nObject#blank?). Happens by default on …\n"],["validates_acceptance_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_acceptance_of","(*attr_names)","<p>Encapsulates the pattern of wanting to validate the acceptance of a terms\nof service check box (or similar …\n"],["validates_confirmation_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_confirmation_of","(*attr_names)","<p>Encapsulates the pattern of wanting to validate a password or email address\nfield with a confirmation. …\n"],["validates_each","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-validates_each","(*attr_names, &block)","<p>Validates each attribute against a block.\n\n<pre><code>class Person\n  include ActiveModel::Validations\n\n  attr_accessor ...\n</code></pre>\n"],["validates_exclusion_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_exclusion_of","(*attr_names)","<p>Validates that the value of the specified attribute is not in a particular\nenumerable object.\n\n<pre><code>class Person ...\n</code></pre>\n"],["validates_format_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_format_of","(*attr_names)","<p>Validates whether the value of the specified attribute is of the correct\nform, going by the regular expression …\n"],["validates_inclusion_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_inclusion_of","(*attr_names)","<p>Validates whether the value of the specified attribute is available in a\nparticular enumerable object. …\n"],["validates_length_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_length_of","(*attr_names)","<p>Validates that the specified attribute matches the length restrictions\nsupplied. Only one option can …\n"],["validates_numericality_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_numericality_of","(*attr_names)","<p>Validates whether the value of the specified attribute is numeric by trying\nto convert it to a float …\n"],["validates_presence_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_presence_of","(*attr_names)","<p>Validates that the specified attributes are not blank (as defined by\nObject#blank?). Happens by default …\n"],["validates_size_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_size_of","(*attr_names)",""],["validates_with","ActiveModel::Validations","classes/ActiveModel/Validations.html#method-i-validates_with","(*args, &block)","<p>Passes the record off to the class or classes specified and allows them to\nadd errors based on more complex …\n"],["validates_with","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-validates_with","(*args, &block)","<p>Passes the record off to the class or classes specified and allows them to\nadd errors based on more complex …\n"],["validators","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-validators","()","<p>List all validators that are being used to validate the model using\n<code>validates_with</code> method.\n\n<pre><code>class Person ...\n</code></pre>\n"],["validators_on","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-validators_on","(*attributes)","<p>List all validators that are being used to validate a specific attribute.\n\n<pre><code>class Person\n  include ActiveModel::Validations ...\n</code></pre>\n"],["values","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-values","()","<p>Returns all message values.\n\n<pre><code>person.errors.messages # =&gt; {:name=&gt;[&quot;can not be nil&quot;, &quot;must be specified&quot;]} ...\n</code></pre>\n"],["values","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-values","()",""],["values_at","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-values_at","(*list)",""],["vendor","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-vendor","()",""],["vendor","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-vendor","(filename, data=nil, &block)","<p>Create a new file in the vendor/ directory. Code can be specified in a\nblock or a data string can be …\n"],["vendor_javascripts","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-vendor_javascripts","()",""],["vendor_stylesheets","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-vendor_stylesheets","()",""],["version","ActionMailer","classes/ActionMailer.html#method-c-version","()","<p>Returns the version of the currently loaded ActionMailer as a Gem::Version\n"],["version","ActiveModel","classes/ActiveModel.html#method-c-version","()","<p>Returns the version of the currently loaded ActiveModel as a Gem::Version\n"],["version","Rails","classes/Rails.html#method-i-version","()",""],["watchable_dirs","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-watchable_dirs","()","<p>Add directories that should be watched for change. The key of the hashes\nshould be directories and the …\n"],["watchable_files","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-watchable_files","()","<p>Add files that should be watched for change.\n"],["whiny_nils=","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-whiny_nils-3D","(*)",""],["wrap_with_namespace","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-wrap_with_namespace","(content)",""],["write","ActiveSupport::Cache::RedisStore","classes/ActiveSupport/Cache/RedisStore.html#method-i-write","(name, value, options = nil)",""],["write_entry","ActiveSupport::Cache::RedisStore","classes/ActiveSupport/Cache/RedisStore.html#method-i-write_entry","(key, entry, options)",""],["CHANGELOG","","files/__/__/_rvm/gems/jruby-1_7_6/gems/actionmailer-4_0_0/CHANGELOG_md.html","","<p>Rails 4.0.0 (June 25, 2013)\n<p>Allow passing interpolations to <code>#default_i18n_subject</code>, e.g.:\n\n<pre><code># config/locales/en.yml ...</code></pre>\n"],["README","","files/__/__/_rvm/gems/jruby-1_7_6/gems/actionmailer-4_0_0/README_rdoc.html","","<p>Action Mailer – Easy email delivery and testing\n<p>Action Mailer is a framework for designing email service …\n"],["CHANGELOG","","files/__/__/_rvm/gems/jruby-1_7_6/gems/activemodel-4_0_0/CHANGELOG_md.html","","<p>Rails 4.0.0 (June 25, 2013)\n<p>Fix regression in has_secure_password. When a password is set, but\na\nconfirmation ...\n"],["README","","files/__/__/_rvm/gems/jruby-1_7_6/gems/activemodel-4_0_0/README_rdoc.html","","<p>Active Model – model interfaces for Rails\n<p>Active Model provides a known set of interfaces for usage in …\n"],["CHANGELOG","","files/__/__/_rvm/gems/jruby-1_7_6/gems/railties-4_0_0/CHANGELOG_md.html","","<p>Rails 4.0.0 (June 25, 2013)\n<p>Clearing autoloaded constants triggers routes reloading [Fixes #10685].\n<em>Xavier</em> ...\n"],["RDOC_MAIN","","files/__/__/_rvm/gems/jruby-1_7_6/gems/railties-4_0_0/RDOC_MAIN_rdoc.html","","<p>Welcome to Rails\n<p>Rails is a web-application framework that includes everything needed to\ncreate database-backed …\n"],["README","","files/__/__/_rvm/gems/jruby-1_7_6/gems/railties-4_0_0/README_rdoc.html","","<p>Railties – Gluing the Engine to the Rails\n<p>Railties is responsible for gluing all frameworks together. …\n"]]}}