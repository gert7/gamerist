autoLink = (options...) ->
  pattern = ///
    (^|[\s\n]|<br\/?>) # Capture the beginning of string or line or leading whitespace
    (
      (?:https?|ftp):// # Look for a valid URL protocol (non-captured)
      [\-A-Z0-9+\u0026\u2019@#/%?=()~_|!:,.;]* # Valid URL characters (any number of times)
      [\-A-Z0-9+\u0026@#/%=~()_|] # String must end in a valid URL character
    )
  ///gi

  return @replace(pattern, "$1<a href='$2'>$2</a>") unless options.length > 0

  option = options[0]
  linkAttributes = (
    " #{k}='#{v}'" for k, v of option when k isnt 'callback'
  ).join('')

  @replace pattern, (match, space, url) ->
    link = option.callback?(url) or
      "<a href='#{url}'#{linkAttributes}>#{url}</a>"

    "#{space}#{link}"

String.prototype['autoLink'] = autoLink

random_unique_signature = () ->
  text = ""
  possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  for i in [0..7]
    text += possible.charAt(Math.floor(Math.random() * possible.length));
  return text

CHANGED_WAGER = false
STAGING_WAGER = null
UPTIMEOUT     = 3000
CHATRENDERED  = false

STATE_PUBLIC  = 1
STATE_LOCKED  = 2
STATE_ACTIVE  = 4
STATE_OVER    = 8
STATE_ERRORED = 16

MAPS_DATA = <%= JSON.generate($gamerist_mapdata) %>

fetchPlayer = (data, id) ->
  return null if !data
  finder = (v) ->
    v.id == id
  ply = $.grep(data.rules.players, finder, false)[0]
  return ply

fetchCurrentPlayer = (data) ->
  return fetchPlayer(data, data.reqid)

setReady = () ->
  $("#srules_readystatus").val("1")
  $("#srules_readybutton").val("Not Ready")
  $("#srules_readylabel").text("Ready")
  
setUnready = () ->
  $("#srules_readystatus").val("0")
  $("#srules_readybutton").val("Ready")
  $("#srules_readylabel").text("Not Ready")

toggleReady = () ->
  if($("#srules_readystatus").val() == "0")
    setReady()
  else
    setUnready()

renderPlayerList = (data) ->
  srulesPlayers = document.createElement("div")
  $(srulesPlayers).attr("id", "srules_players")
  console.dir(data)
  for i in [0..(data.rules.playercount - 1)]
    ply    = data.rules.players[i]
    isTeam = false
    (if ply and String(ply.team) != "0" then isTeam = true)
    console.dir(ply.team) if isTeam
    $(srulesPlayers).append("<div id='srules_player_" + i + "' class='srules_player'><div class='account_mini'><div class='account_mini_teambar_" + (if (isTeam and ply.team == 2) then "red" else if(isTeam and ply.team == 3) then "blu") + "'></div><div class='account_mini_avatar'>" + (if isTeam then ("<img src='" + ply.avatar + "'/>") else "") + "</div><div class='account_mini_name'>" + (if isTeam then ply.steamname else "") + "</div><div class='account_mini_wager'>" + (if isTeam then ply.wager else "") + "</div></div></div>")
  $("#srules_players").replaceWith(srulesPlayers)

animateRepeat = (t) ->
  for i in [0..$("#srules_waiting").children().length]
    col = ((Math.sin(t - (i / 3.0)) + 1.0) * 32.0) + 164.0
    $("#srules_waiting").children().eq(i).css("color", ("rgb(" + Math.floor(col) + "," + Math.floor(col) + "," + Math.floor(col) + ")"))
  setTimeout((-> animateRepeat(t + 0.1)), 66)

ANIMATING = false

animateWaiting = () ->
  return false if ANIMATING
  nuevo = document.createElement("div")
  $(nuevo).attr("id", "srules_waiting")
  for i in [0..$("#srules_waiting").text().length]
    xi = document.createElement("span")
    $(xi).text($("#srules_waiting").text()[i])
    $(nuevo).append(xi)
  $("#srules_waiting").replaceWith(nuevo)
  animateRepeat(1)
  ANIMATING = true

CHIMESTATE = 1

playChimeIfChanged = (state) ->
  document.getElementById("srules_buttons_chime").play() unless CHIMESTATE == state
  animateWaiting() if(state == 2 and CHIMESTATE != 2)
  CHIMESTATE = state

readyToIP = (data) ->
  console.log(data.state)
  if(data.state == 2)
    playChimeIfChanged(2)
    $("#srules_buttons_inner").animate({top:-85}, 800)
  if(data.state == 4)
    playChimeIfChanged(4)
    $("#srules_play_game").click(() -> window.location.href = "steam://open/main/")
    $("#srules_play_game_ip").text("IP Address: " + data.final_server_address)
    $("#srules_buttons_inner").animate({top:0}, 800, (->))

# Pop up an error message if the user isn't in the room
declareInRoom = (t, roomIsPublic, data) ->
  console.dir(t)
  console.dir(roomIsPublic)
  $("#srules_chatbox_insertzone").css("display", "none") unless roomIsPublic
  $("#srules_ready").css("display", "inline-block") if t
  readyToIP(data) if (t and data.state != 1)
  if(t and roomIsPublic)
    # $("#srules_notice").css("display", "none")
    $("#srules_wagerselector").prop('disabled', false)
    $("#srules_wagersubmit").prop('disabled', false)
    $("#srules_readybutton").prop('disabled', false)
    $("#srules_teamselect").css("display", "none")
    $("#srules_team_leave").css("display", "block")
    # $("#srules_buttons").css("display", "block")
  else
    setUnready() if roomIsPublic
    # $("#srules_notice").css("display", "block") # $("#srules_notice").text("You are not in this room!")
    $("#srules_wagerselector").prop('disabled', true)
    $("#srules_wagerselector").css('opacity', 0)
    $("#srules_wagersubmit").prop('disabled', true)
    $("#srules_wagersubmit").css('display', 'none')
    $("#srules_wagersubmitc").css('opacity', 0)
    $("#srules_teamselect").css("display", "block") if (roomIsPublic and data.prejoindata == "Y")
    $("#srules_team_leave").css("display", "none")
    # $("#srules_buttons").css("display", "none")
    $("#srules_ready").css("display", "none") unless t

chatLine = (steamname, message) ->
  name = $("<div/>").text(steamname).html()
  msg  = $("<div/>").text(message.message).html()
  return '<div class="srules_chatbox_steamname">' + name + '</div>: <div class="srules_chatbox_messagecontent">' + msg.autoLink() + "</div>"

renderChat = (data) ->
  srulesChat = document.createElement("div")
  $(srulesChat).attr("id", "srules_chatbox_text")
  if(data and data.rules.messages)
    for i in [0..(data.rules.messages.length - 1)]
      msg = data.rules.messages[i]
      # ply = fetchPlayer(data, msg.user_id)
      if msg.steamname
        $(srulesChat).append("<div class='srules_chatbox_message' index='" + msg.index + "'>" + chatLine(msg.steamname, msg) + "</div>")
    $("#srules_chatbox_text").replaceWith(srulesChat)
    $("#srules_chatbox_text").animate({ scrollTop: 9999999 }, 0)

updateChat = (data) ->
  if(data and data.rules.messages)
    msg = $(data.rules.messages).last()[0]
    # ply = fetchPlayer(data, msg.user_id)
    console.dir($("#srules_chatbox_text").children().last().attr("index"))
    console.dir(msg.index)
    if String($("#srules_chatbox_text").children().last().attr("index")) != String(msg.index)
      $("#srules_chatbox_text").append("<div class='srules_chatbox_message' index='" + msg.index + "'>" + chatLine(msg.steamname, msg) + "</div>")
      $("#srules_chatbox_text").animate({ scrollTop: 9999999 }, 0)

# ## GLOBAL TO AVOID FLICKERING
CURRENT_UNIQUE_SIGNATURE = ""

postErrorMessages = (data) ->
  if data.personal_messages and (data.personal_messages.length > 0)
    $("#srules_errormessages").css("display", "block")
    for erm in data.personal_messages
      $("#srules_errormessages").append("<p>- " + erm[1] + "</p>")

GameOver = () ->
  $("#rooms").html("<br/><br/><center>Game has ended!</center><br/><br/>")

printWinners = (data) ->
  $("#srules_chatbox").css("display", "none")
  $("#srules_winners").css("display", "inline-block")
  winmode = ""
  for map in MAPS_DATA.games[0].maps
    if(map.name == data.rules.map)
      winmode = map.winmode
  if(Number(data.rules.winningteam) == 2)
    if winmode == "normal"
      $("#srules_winners_summary").text("Red Team won this game by capturing the most points")
    else if winmode == "red"
      $("#srules_winners_summary").text("Red Team won this game by defending until time ran out")
    else if winmode == "final" # distinction for maps like pipeline, not made in gamerist.sp
      $("#srules_winners_summary").text("Red Team won this game by winning the last round")
  if(Number(data.rules.winningteam) == 3)
    if winmode == "normal"
      $("#srules_winners_summary").text("Blu Team won this game by capturing the most points")
    else if winmode == "red"
      $("#srules_winners_summary").text("Blu Team won this game by defeating the Red Team's defenses")
    else if winmode == "final"
      $("#srules_winners_summary").text("Blu Team won this game by winning the last round")
  redscore = 0
  bluscore = 0
  for player in data.rules.players
    if player.team == 2
      redscore += player.score
    else if player.team == 3
      bluscore += player.score
  $("#srules_winners_red_points").text(redscore + " points")
  $("#srules_winners_blu_points").text(bluscore + " points")

updatePageObject = (data) ->
  return false if data.uniquesignature != CURRENT_UNIQUE_SIGNATURE
  return GameOver() if data.rules == null
  $("#srules_info_column_game").text("Game: " + data.rules.game)
  $("#srules_info_column_map").text("Map: " + data.rules.map)
  $("#srules_info_column_playercount").text("Players: " + data.rules.playercount)
  $("#srules_info_column_continent").text("Region: " + data.rules.server_region)
  $("#srules_roomwager").text(data.rules.wager)
  $("#srules_shybar_id").text(data.id)
  postErrorMessages(data)
  if(!CHATRENDERED and data.state != STATE_OVER)
    renderChat(data)
    CHATRENDERED = true
  updateChat(data) if data.state != STATE_OVER
  printWinners(data) if data.state == STATE_OVER
  if(!CHANGED_WAGER)
    $("#srules_wagerselector").val(data.rules.wager)
    STAGING_WAGER = data.rules.wager
    CHANGED_WAGER = true
  curp = fetchCurrentPlayer(data)
  if curp and String(curp.team) != "0"
    if Number(data.state) == 1
      declareInRoom(true, true, data)
    else
      declareInRoom(true, false, data)
    if curp.ready == "1"
      setReady()
    else
      setUnready()
  else
    declareInRoom(false, data.state == 1, data)
  renderPlayerList(data)
  if(data and data.state != 1)
    console.log(data.state)
    UPTIMEOUT = 12000

updatePageEdit = (addkey, addvalue) ->
  $("#srules_errormessages").css("display", "none")
  CURRENT_UNIQUE_SIGNATURE = random_unique_signature()
  comei = {"_method": "patch", "upclass": "readywager", "uniquesignature": CURRENT_UNIQUE_SIGNATURE}
  comei[addkey] = addvalue
  #STAGING_WAGER = $("#srules_wagerselector").val()
  #if(CHANGED_WAGER)
  #  comei.wager = STAGING_WAGER
  $.post(document.location + ".json", comei, updatePageObject)

updatePage = (now, dowager, NEXTUP) ->
  if(now or !NEXTUP or (Date.now() >= NEXTUP))
    CURRENT_UNIQUE_SIGNATURE = random_unique_signature()
    comei = {"_method": "patch", "upclass": "generic", "uniquesignature": CURRENT_UNIQUE_SIGNATURE}
    $.post(document.location + ".json", comei, updatePageObject)
  if NEXTUP
    if(Date.now() >= NEXTUP)
      setTimeout((() -> updatePage(false, false, NEXTUP + UPTIMEOUT)), UPTIMEOUT)
    else
      setTimeout((() -> updatePage(false, false, NEXTUP)), UPTIMEOUT)

sendChatMessage = () ->
  comei = {"_method": "patch", "upclass": "chatroom", "message": $("#srules_chatbox_input").val(), "uniquesignature": CURRENT_UNIQUE_SIGNATURE}
  $.post(document.location + ".json", comei, updatePageObject)

$(document).ready () ->
  if $("#srules_info").length
    updatePage(true, false)
    setTimeout((() -> updatePage(false, false, Date.now() + UPTIMEOUT)), UPTIMEOUT)
    $("#srules_wagersubmit").click () ->
      updatePageEdit("wager", $("#srules_wagerselector").val())
    $("#srules_readybutton").click () ->
      toggleReady()
      updatePageEdit("ready", $("#srules_readystatus").val())
    $("#srules_chatbox_inputsubmit").click () ->
      sendChatMessage()
    $("#srules_chatbox_input").keydown (e) ->
      if(e.which == 13) # ENTER
        sendChatMessage()
    $("#srules_chatbox_input").keyup (e) ->
      if(e.which == 13)
        $("#srules_chatbox_input").val("")
    $("#srules_teamselect_red").click () ->
      updatePageEdit("team", "2");
    $("#srules_teamselect_blu").click () ->
      updatePageEdit("team", "3");
    $("#srules_teamselect_leave").click () ->
      updatePageEdit("wager", "0");
        
